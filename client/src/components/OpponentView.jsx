import React from "react";
import "./OpponentView.css";

const OpponentView = ({ player, position, isCurrentTurn, totalPlayers }) => {
  // Safety check for invalid player data
  if (!player || !player.id) {
    console.warn("Invalid player data in OpponentView");
    return null; // Don't render anything for invalid players
  }

  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª–∞—Å—É –ø–æ–∑–∏—Ü—ñ—ó –æ–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥—Ä–∞–≤—Ü—ñ–≤
  const getPositionClass = () => {
    // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (—è–∫—â–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–æ–∑–∏—Ü—ñ—é)
    if (!position) {
      return "opponent-top";
    }
    
    // –î–ª—è –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ —î 1 –æ–ø–æ–Ω–µ–Ω—Ç
    if (totalPlayers === 2) {
      return "opponent-top";
    }
    
    // –î–ª—è –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ —î 2 –æ–ø–æ–Ω–µ–Ω—Ç–∏
    if (totalPlayers === 3) {
      return position === 1 ? "opponent-left" : "opponent-right";
    }
    
    // –î–ª—è –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ —î 3 –æ–ø–æ–Ω–µ–Ω—Ç–∏
    if (totalPlayers === 4) {
      if (position === 1) return "opponent-left";
      if (position === 2) return "opponent-top";
      if (position === 3) return "opponent-right";
    }
    
    return "opponent-top"; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
  };

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ü–µ —Ö—ñ–¥ –æ–ø–æ–Ω–µ–Ω—Ç–∞ 
  const isPlayerTurn = isCurrentTurn === player.id;
  
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–º–∞–∫—Å–∏–º—É–º 20)
  const cardCount = Math.min(player.handSize || 0, 20);
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∏–≤ –∫–∞—Ä—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const cardsArray = Array.from({ length: cardCount });
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –æ–ø–æ–Ω–µ–Ω—Ç–∞
  const positionClass = getPositionClass();
  
  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∏–ª—ñ–≤ –¥–ª—è –∫–∞—Ä—Ç –æ–ø–æ–Ω–µ–Ω—Ç–∞
  const getCardStyle = (index) => {
    // –ë–∞–∑–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É
    const totalCards = cardCount;
    
    // –û–±—á–∏—Å–ª—é—î–º–æ –∫—É—Ç —Ä–æ–∑–≤–æ—Ä–æ—Ç—É –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–∞—Ä—Ç
    const maxFanAngle = Math.min(40, totalCards * 3); // –ü–ª–∞–≤–Ω–µ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –∫—É—Ç–∞ –≤—ñ—è–ª–∞
    
    // –ó–º—ñ—â–µ–Ω–Ω—è –∫–∞—Ä—Ç —ñ –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è
    const cardWidth = 110; // –¢–∞–∫–∏–π –∂–µ —Ä–æ–∑–º—ñ—Ä —è–∫ —É –∫–∞—Ä—Ç –≥—Ä–∞–≤—Ü—è
    const cardHeight = 165;
    
    // –ü–ª–∞–≤–Ω–µ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–∞—Ä—Ç
    const minOverlap = 0.75; // –ó–º–µ–Ω—à—É—î–º–æ –ø–µ—Ä–µ–∫—Ä–∏—Ç—Ç—è –¥–ª—è –∫—Ä–∞—â–æ—ó –≤–∏–¥–∏–º–æ—Å—Ç—ñ –∫–∞—Ä—Ç
    const maxOverlap = 0.4; // –ó–±—ñ–ª—å—à—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –ø–µ—Ä–µ–∫—Ä–∏—Ç—Ç—è –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—ñ
    
    // –õ—ñ–Ω—ñ–π–Ω–µ –∑–º–µ–Ω—à–µ–Ω–Ω—è –≤—ñ–¥ minOverlap –¥–æ maxOverlap –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–∞—Ä—Ç
    const overlappingFactor = Math.max(
      maxOverlap, 
      minOverlap - (totalCards - 3) * (minOverlap - maxOverlap) / 5
    );
    
    // –û–±—á–∏—Å–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —à–∏—Ä–∏–Ω—É –≤—ñ—è–ª–∞
    const totalWidth = cardWidth + (totalCards - 1) * cardWidth * overlappingFactor;
    
    // –ü–æ—á–∞—Ç–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è (—â–æ–± —Ü–µ–Ω—Ç—Ä—É–≤–∞—Ç–∏ –≤—ñ—è–ª–æ)
    const startPosition = -totalWidth / 2 + cardWidth / 2;
    
    // –ü–æ–∑–∏—Ü—ñ—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ä—Ç–∏
    const cardPosition = startPosition + index * cardWidth * overlappingFactor;
    
    let style = {};
    let angle = -maxFanAngle/2 + (index * (maxFanAngle / (totalCards > 1 ? totalCards - 1 : 1)));
    
    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Å—Ç–∏–ª—ñ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –ø–æ–∑–∏—Ü—ñ—ó –æ–ø–æ–Ω–µ–Ω—Ç–∞
    switch (positionClass) {
      case 'opponent-top':
        // –ö–∞—Ä—Ç–∏ –æ–ø–æ–Ω–µ–Ω—Ç–∞ –∑–≤–µ—Ä—Ö—É (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ñ –Ω–∞ 180¬∞ –∑ —Ñ–æ–∫—É—Å–æ–º –∑–≤–µ—Ä—Ö—É)
        style = {
          width: `${cardWidth}px`,
          height: `${cardHeight}px`,
          transform: `rotate(${180 - angle}deg)`,
          transformOrigin: 'center top',
          left: `${cardPosition}px`,
          top: '0px',
        };
        break;
        
      case 'opponent-left':
        // –ö–∞—Ä—Ç–∏ –æ–ø–æ–Ω–µ–Ω—Ç–∞ –∑–ª—ñ–≤–∞ (–∑ —Ñ–æ–∫—É—Å–æ–º –∑–ª—ñ–≤–∞ —ñ —Ä–æ–∑—Ö–æ–¥—è—Ç—å—Å—è –≤–ø—Ä–∞–≤–æ)
        style = {
          width: `${cardWidth}px`,
          height: `${cardHeight}px`,
          transform: `rotate(${90 + angle}deg)`, // + angle —â–æ–± –∫–∞—Ä—Ç–∏–Ω–∏ —Ä–æ–∑–∫—Ä–∏–≤–∞–ª–∏—Å—å –≤–ø—Ä–∞–≤–æ
          transformOrigin: 'left center', // –¢–æ—á–∫–∞ —Ñ–æ–∫—É—Å—É –∑–ª—ñ–≤–∞
          left: '0px',
          // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è - –∑–∞–±–µ–∑–ø–µ—á—É—î–º–æ, —â–æ –∫–∞—Ä—Ç–∏–Ω–∏ —Ä–æ–∑—Ö–æ–¥—è—Ç—å—Å—è —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ –≤–≤–µ—Ä—Ö —ñ –≤–Ω–∏–∑
          top: `calc(50% - ${cardHeight / 2}px + ${cardPosition * 0.8}px)`,
        };
        break;
        
      case 'opponent-right':
        // –ö–∞—Ä—Ç–∏ –æ–ø–æ–Ω–µ–Ω—Ç–∞ —Å–ø—Ä–∞–≤–∞ (–∑ —Ñ–æ–∫—É—Å–æ–º —Å–ø—Ä–∞–≤–∞ —ñ —Ä–æ–∑—Ö–æ–¥—è—Ç—å—Å—è –≤–ª—ñ–≤–æ)
        style = {
          width: `${cardWidth}px`,
          height: `${cardHeight}px`,
          transform: `rotate(${-90 - angle}deg)`, // - angle —â–æ–± –∫–∞—Ä—Ç–∏–Ω–∏ —Ä–æ–∑–∫—Ä–∏–≤–∞–ª–∏—Å—å –≤–ª—ñ–≤–æ
          transformOrigin: 'right center', // –¢–æ—á–∫–∞ —Ñ–æ–∫—É—Å—É —Å–ø—Ä–∞–≤–∞
          right: '0px',
          // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–µ —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è - –∑–∞–±–µ–∑–ø–µ—á—É—î–º–æ, —â–æ –∫–∞—Ä—Ç–∏–Ω–∏ —Ä–æ–∑—Ö–æ–¥—è—Ç—å—Å—è —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ –≤–≤–µ—Ä—Ö —ñ –≤–Ω–∏–∑
          top: `calc(50% - ${cardHeight / 2}px + ${cardPosition * 0.8}px)`,
        };
        break;
        
      default:
        break;
    }
    
    // –î–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤—ñ —Å—Ç–∏–ª—ñ
    style.position = 'absolute';
    style.backgroundSize = 'contain';
    style.backgroundColor = '#000';
    style.borderRadius = '10px';
    style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.3)';
    
    return style;
  };

  return (
    <div className={`opponent-container ${positionClass} ${isPlayerTurn ? 'current-turn' : ''}`}>
      <div className="opponent-avatar">
        {isPlayerTurn ? "üë§üîÑ" : "üë§"}
      </div>
      
      <div className="opponent-info">
        <div className="opponent-name">
          {player.name || (player.id && typeof player.id === 'string' 
            ? `–ì—Ä–∞–≤–µ—Ü—å ${player.id}` 
            : `–ì—Ä–∞–≤–µ—Ü—å ${position}`)}
        </div>
        <div className="opponent-cards-count">
          {player.handSize || 0} –∫–∞—Ä—Ç
        </div>
      </div>
      
      <div className={`opponent-cards ${positionClass}-cards`}>
        {cardsArray.map((_, index) => (
          <div 
            key={index} 
            className="opponent-card"
            style={getCardStyle(index)}
          >
            <img 
              src="/img/back/card_back.webp" 
              alt="–ö–∞—Ä—Ç–∞ –æ–ø–æ–Ω–µ–Ω—Ç–∞"
              className="card-back-img"
              style={{width: '100%', height: '100%', objectFit: 'contain'}}
              onError={(e) => { e.target.onerror = null; e.target.src = '/img/card_placeholder.webp'; }}
            />
          </div>
        ))}
      </div>
    </div>
  );
};

export default OpponentView; 