const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { generateDeck, shuffleDeck, dealCards } = require('../shared/gameLogic');
const gameStates = {};

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB Atlas
mongoose.connect(process.env.MONGO_URL, { 
  useNewUrlParser: true, 
  useUnifiedTopology: true 
})
  .then(() => console.log('MongoDB Atlas –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ'))
  .catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB Atlas:', err));

// –°—Ö–µ–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  createdAt: { type: Date, default: Date.now }
});

const User = mongoose.model('User', userSchema);

// –°—Ö–µ–º–∞ –∫—ñ–º–Ω–∞—Ç–∏ –∑—ñ –∑–≤'—è–∑–∫–æ–º —ñ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
const roomSchema = new mongoose.Schema({
  roomId: { type: String, required: true, unique: true },
  players: [{ type: String }],
  createdAt: { type: Date, default: Date.now },
  gameStarted: { type: Boolean, default: false }
});

const Room = mongoose.model('Room', roomSchema);

// Helper function to save a document with retries for version conflicts
async function saveWithRetry(document, maxRetries = 3) {
  let retries = 0;
  
  while (retries < maxRetries) {
    try {
      await document.save();
      return true;
    } catch (err) {
      if (err.name === 'VersionError' && retries < maxRetries - 1) {
        console.log(`VersionError, —Å–ø—Ä–æ–±–∞ ${retries + 1} –∑ ${maxRetries}`);
        
        // Reload the document to get the latest version
        const refreshDoc = await document.constructor.findById(document._id);
        if (!refreshDoc) {
          console.log('–î–æ–∫—É–º–µ–Ω—Ç –±—ñ–ª—å—à–µ –Ω–µ —ñ—Å–Ω—É—î');
          return false;
        }
        
        // Copy the modified fields from our document to the refreshed one
        Object.keys(document.modified).forEach(path => {
          if (path !== '_id' && path !== '__v') {
            refreshDoc.set(path, document.get(path));
          }
        });
        
        // Replace our document with the refreshed one
        document = refreshDoc;
        retries++;
      } else {
        // Different error or max retries reached
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:', err);
        return false;
      }
    }
  }
  
  return false;
}

// JWT Secret
const JWT_SECRET = 'fortuno-secret-key';

// Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
const authenticate = async (req, res, next) => {
  try {
    const token = req.headers.authorization?.split(' ')[1];
    if (!token) {
      return res.status(401).json({ error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' });
    }

    const decoded = jwt.verify(token, JWT_SECRET);
    const user = await User.findById(decoded.userId);
    if (!user) {
      return res.status(401).json({ error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π' });
    }

    req.user = user;
    next();
  } catch (err) {
    return res.status(401).json({ error: '–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó' });
  }
};

// –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.post('/api/users/register', async (req, res) => {
  try {
    const { username, password } = req.body;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤
    if (!username || !password) {
      return res.status(400).json({ error: '–í—Å—ñ –ø–æ–ª—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ' });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —ñ—Å–Ω—É—î –≤–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º username
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(400).json({ error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º –Ω—ñ–∫–Ω–µ–π–º–æ–º –≤–∂–µ —ñ—Å–Ω—É—î' });
    }

    // –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(password, 10);

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const user = new User({
      username,
      password: hashedPassword
    });

    await user.save();

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è JWT —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign({ 
      userId: user._id,
      username: user.username 
    }, JWT_SECRET, { expiresIn: '7d' });

    res.status(201).json({
      message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π',
      token,
      user: {
        id: user._id,
        username: user.username
      }
    });
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', err);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' });
  }
});

// –í—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.post('/api/users/login', async (req, res) => {
  try {
    const { username, password } = req.body;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤
    if (!username || !password) {
      return res.status(400).json({ error: '–í—Å—ñ –ø–æ–ª—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ' });
    }

    // –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ username
    const user = await User.findOne({ username });
    if (!user) {
      return res.status(401).json({ error: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω—ñ–∫–Ω–µ–π–º –∞–±–æ –ø–∞—Ä–æ–ª—å' });
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ error: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –Ω—ñ–∫–Ω–µ–π–º –∞–±–æ –ø–∞—Ä–æ–ª—å' });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è JWT —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign({ 
      userId: user._id,
      username: user.username 
    }, JWT_SECRET, { expiresIn: '7d' });

    res.json({
      message: '–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π',
      token,
      user: {
        id: user._id,
        username: user.username
      }
    });
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:', err);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É' });
  }
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞)
app.get('/api/users/me', authenticate, async (req, res) => {
  res.json({
    user: {
      id: req.user._id,
      username: req.user.username
    }
  });
});

// –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏ (–∑–∞—Ö–∏—â–µ–Ω–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é)
app.post('/api/rooms', authenticate, async (req, res) => {
  try {
    const roomId = Math.random().toString(36).substring(2, 8);
    const room = new Room({ 
      roomId, 
      players: [req.user.username] 
    });
    await room.save();
    console.log(`üè† –ö—ñ–º–Ω–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞: ${roomId}, –≥—Ä–∞–≤–µ—Ü—å: ${req.user.username}`);
    res.json({ roomId });
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏:', err);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏' });
  }
});

// –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫—ñ–º–Ω–∞—Ç–∏
app.get('/api/rooms/:roomId', async (req, res) => {
  try {
    const room = await Room.findOne({ roomId: req.params.roomId });
    if (room) {
      res.json({ 
        exists: true, 
        gameStarted: room.gameStarted,
        players: room.players
      });
    } else {
      res.json({ exists: false });
    }
  } catch (err) {
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫—ñ–º–Ω–∞—Ç–∏' });
  }
});

// –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—ñ–º–Ω–∞—Ç
app.get('/api/rooms', async (req, res) => {
  try {
    const rooms = await Room.find({}).sort({ createdAt: -1 });
    
    // Filter out rooms with zero players
    const validRooms = rooms.filter(room => {
      // Remove duplicate players if any
      const uniquePlayers = [...new Set(room.players)];
      
      if (uniquePlayers.length !== room.players.length) {
        // If we found duplicates, save the cleaned player list
        console.log(`Cleaning duplicates in room ${room.roomId} player list`);
        // This will be saved but doesn't block the response
        Room.updateOne(
          { roomId: room.roomId }, 
          { $set: { players: uniquePlayers } }
        ).catch(err => console.error('Error updating room players:', err));
      }
      
      // Only include rooms with at least one player
      return uniquePlayers.length > 0;
    });
    
    // Process valid rooms to return to client
    const roomsWithPlayerCount = validRooms.map(room => {
      const uniquePlayers = [...new Set(room.players)];
      
      return {
        roomId: room.roomId,
        playerCount: uniquePlayers.length,
        players: uniquePlayers,
        gameStarted: room.gameStarted
      };
    });
    
    res.json({ rooms: roomsWithPlayerCount });
  } catch (err) {
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫—ñ–º–Ω–∞—Ç' });
  }
});

const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: process.env.NODE_ENV === 'production' 
      ? ['https://fortuno.vercel.app', 'https://fortuno-client.vercel.app']
      : 'http://localhost:5173',
    methods: ['GET', 'POST'],
    credentials: true
  },
  transports: ['websocket', 'polling']
});

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –≥—Ä–∞–≤—Ü—ñ–≤ –≤—Å—ñ–º —É –∫—ñ–º–Ω–∞—Ç—ñ
async function emitPlayersState(roomId) {
  try {
    const state = gameStates[roomId];
    if (!state) return;
    
    // Get the current room data from the database to ensure we have the latest players list
    const room = await Room.findOne({ roomId });
    if (!room) return;
    
    // Use the database player list as the source of truth
    const players = room.players.map(username => ({
      id: username,
      name: username,
      handSize: state.hands[username] ? state.hands[username].length : 0
    }));
    
    io.to(roomId).emit('updatePlayers', { players });
  } catch (err) {
    console.error('Error in emitPlayersState:', err);
  }
}

// Add a global map to track completely disconnected players
const disconnectedPlayers = new Map(); // roomId -> Set of disconnected usernames

// Add chat-related data structures
const roomMessages = new Map(); // Store messages for each room temporarily
const typingUsers = new Map(); // Track typing status for each room

// –û–±—Ä–æ–±–∫–∞ Socket.IO –ø–æ–¥—ñ–π
io.on('connection', (socket) => {
  console.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è:', socket.id);
  
  // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –¥–ª—è —Å–æ–∫–µ—Ç–∞
  socket.on('authenticate', (token) => {
    try {
      const decoded = jwt.verify(token, JWT_SECRET);
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –æ–±'—î–∫—Ç—ñ —Å–æ–∫–µ—Ç–∞
      socket.userId = decoded.userId;
      socket.username = decoded.username;
      console.log(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${socket.username} –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π`);
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Å–æ–∫–µ—Ç–∞:', err);
    }
  });

  // –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
  socket.on('joinRoom', async (roomId) => {
    try {
      // Skip if no username (authentication required)
      if (!socket.username) {
        socket.emit('authError', { message: '–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏' });
        console.log(`‚ùå –°–ø—Ä–æ–±–∞ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ ${roomId} –±–µ–∑ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó`);
        return;
      }
      
      console.log(`üëã –°–ø—Ä–æ–±–∞ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}, –≥—Ä–∞–≤–µ—Ü—å: ${socket.username}, socket: ${socket.id}`);
      
      // Get all sockets in the room
      const socketsInRoom = await io.in(roomId).fetchSockets();
      
      // For active games, we should allow reconnection even if the player is already in the room
      let roomData = await Room.findOne({ roomId });
      if (!roomData) {
        console.log(`‚ùå –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
        socket.emit('roomNotFound', { message: '–ö—ñ–º–Ω–∞—Ç–∞ –Ω–µ —ñ—Å–Ω—É—î' });
        return;
      }
      
      // For active games, allow reconnection even if player is already in the room
      if (!roomData.gameStarted) {
        // Only check for duplicate connections in waiting rooms
        const isAlreadyInRoom = socketsInRoom.some(s => 
          s.id !== socket.id && s.username === socket.username
        );
        
        if (isAlreadyInRoom) {
          console.log(`‚ö†Ô∏è –ì—Ä–∞–≤–µ—Ü—å ${socket.username} –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ ${roomId} –∑ —ñ–Ω—à–æ–≥–æ —Å–æ–∫–µ—Ç–∞`);
          // Don't add duplicate sockets
          socket.emit('actionBlocked', { message: '–í–∏ –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ –¥–æ —Ü—ñ—î—ó –∫—ñ–º–Ω–∞—Ç–∏ –≤ —ñ–Ω—à—ñ–π –≤–∫–ª–∞–¥—Ü—ñ' });
          return;
        }
      } else {
        console.log(`üéÆ –ì—Ä–∞ –≤–∂–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∞, –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–ª—è ${socket.username}`);
        
        // Remove player from disconnected players list when they reconnect
        if (disconnectedPlayers.has(roomId) && 
            disconnectedPlayers.get(roomId).has(socket.username)) {
          disconnectedPlayers.get(roomId).delete(socket.username);
          console.log(`üë• –ì—Ä–∞–≤–µ—Ü—å ${socket.username} –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}`);
          console.log(`üë• –û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤: ${Array.from(disconnectedPlayers.get(roomId))}`);
        }
      }
      
      // roomData already retrieved earlier
      if (roomData) {
        console.log(`‚úÖ –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –∑–Ω–∞–π–¥–µ–Ω–∞`);
        
        // Check if game has already started and this is a new player trying to join
        if (roomData.gameStarted && !roomData.players.includes(socket.username)) {
          console.log(`‚ö†Ô∏è –ì—Ä–∞–≤–µ—Ü—å ${socket.username} –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≥—Ä–∏, —è–∫–∞ –≤–∂–µ —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—è`);
          socket.emit('gameAlreadyStarted', { message: '–ì—Ä–∞ –≤–∂–µ —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—è. –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è.' });
          return;
        }
        
        // Check if player limit is reached (max 4 players)
        if (roomData.players.length >= 4 && !roomData.players.includes(socket.username)) {
          socket.emit('actionBlocked', { message: '–ö—ñ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞' });
          return;
        }
        
        // Join the room
        socket.join(roomId);
        
        // Store roomId in socket object
        socket.roomId = roomId;
        
        // Properly handle player joining, removing duplicates if needed
        // Check if the player is already in the room
        const playerIndex = roomData.players.indexOf(socket.username);
        
        if (playerIndex === -1) {
          // Player is completely new to this room, add them
          roomData.players.push(socket.username);
          await roomData.save();
          console.log(`üéÆ –ì—Ä–∞–≤–µ—Ü—å ${socket.username} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}. –ó–∞—Ä–∞–∑ –≥—Ä–∞–≤—Ü—ñ–≤: ${roomData.players.length}`);
        } else {
          // Player is reconnecting - check for and remove any duplicates
          let hasDuplicates = false;
          // Create a unique player list
          const uniquePlayers = [...new Set(roomData.players)];
          
          if (uniquePlayers.length !== roomData.players.length) {
            console.log(`‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤. –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫...`);
            console.log(`–ë—É–ª–æ: ${JSON.stringify(roomData.players)}`);
            roomData.players = uniquePlayers;
            try {
              await roomData.save();
              console.log(`–°—Ç–∞–ª–æ: ${JSON.stringify(roomData.players)}`);
            } catch (err) {
              if (err.name === 'VersionError') {
                console.log('–ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä—Å—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –≥—Ä–∞–≤—Ü—ñ–≤, –ø–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞...');
                // Refetch the room and try again
                const refreshedRoom = await Room.findOne({ roomId });
                if (refreshedRoom) {
                  // Remove duplicates from the refreshed list
                  const refreshedUnique = [...new Set(refreshedRoom.players)];
                  if (!refreshedUnique.includes(socket.username)) {
                    refreshedUnique.push(socket.username);
                  }
                  refreshedRoom.players = refreshedUnique;
                  await refreshedRoom.save();
                  console.log(`–°—Ç–∞–ª–æ (–ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏): ${JSON.stringify(refreshedRoom.players)}`);
                  roomData = refreshedRoom; // Update our reference
                }
              } else {
                console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥—Ä–∞–≤—Ü—ñ–≤:', err);
              }
            }
            hasDuplicates = true;
          }
          
          if (!hasDuplicates) {
            console.log(`üîÑ –ì—Ä–∞–≤–µ—Ü—å ${socket.username} –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}`);
          }
        }
        
        // Clean up any duplicate players in the list before proceeding
        const uniquePlayers = [...new Set(roomData.players)];
        if (uniquePlayers.length !== roomData.players.length) {
          console.log(`‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤ –ø—Ä–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—ñ. –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫...`);
          console.log(`–ë—É–ª–æ: ${JSON.stringify(roomData.players)}`);
          roomData.players = uniquePlayers;
          try {
            await roomData.save();
            console.log(`–°—Ç–∞–ª–æ: ${JSON.stringify(roomData.players)}`);
          } catch (err) {
            if (err.name === 'VersionError') {
              console.log('–ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä—Å—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –≥—Ä–∞–≤—Ü—ñ–≤, –ø–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞...');
              // Refetch the room and try again
              const refreshedRoom = await Room.findOne({ roomId });
              if (refreshedRoom) {
                // Remove duplicates from the refreshed list
                const refreshedUnique = [...new Set(refreshedRoom.players)];
                if (!refreshedUnique.includes(socket.username)) {
                  refreshedUnique.push(socket.username);
                }
                refreshedRoom.players = refreshedUnique;
                await refreshedRoom.save();
                console.log(`–°—Ç–∞–ª–æ (–ø—ñ—Å–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏): ${JSON.stringify(refreshedRoom.players)}`);
                roomData = refreshedRoom; // Update our reference
              }
            } else {
              console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥—Ä–∞–≤—Ü—ñ–≤:', err);
            }
          }
        }
        
        // Log current player list after joining
        console.log(`üìã –°–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤ —É –∫—ñ–º–Ω–∞—Ç—ñ ${roomId}: ${JSON.stringify(roomData.players)}`);
        
        // Prepare player list to send to clients
        let playersList = roomData.players;
        const gameState = gameStates[roomId];
        
        if (gameState && gameState.hands) {
          playersList = roomData.players.map(player => ({
            id: player,
            name: player,
            handSize: gameState.hands[player] ? gameState.hands[player].length : 0
          }));
        }
        
        // Send player list to all room members
        io.to(roomId).emit('playerJoined', { players: playersList });
        
        // If game is already in progress, send game state to the reconnecting player
        if (roomData.gameStarted && gameState) {
          console.log(`üé≤ –ì—Ä–∞–≤–µ—Ü—å ${socket.username} –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è –¥–æ –∞–∫—Ç–∏–≤–Ω–æ—ó –≥—Ä–∏`);
          
          // Send the player their hand
          if (gameState.hands[socket.username]) {
            socket.emit('handDealt', {
              hand: gameState.hands[socket.username],
              discardTop: gameState.discardPile[gameState.discardPile.length - 1]
            });
          }
          
          // Send game started event to set the UI state
          socket.emit('gameStarted', {
            players: playersList,
            discardTop: gameState.discardPile[gameState.discardPile.length - 1]
          });
          
          // Send current player's turn
          const currentPlayerId = roomData.players[gameState.currentPlayerIndex];
          socket.emit('turnChanged', { currentPlayerId });
          
          console.log(`üéÆ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—É –≥—Ä—É –≥—Ä–∞–≤—Ü—é ${socket.username}`);
        }
      } else {
        console.log(`‚ùå –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
        socket.emit('roomNotFound', { message: '–ö—ñ–º–Ω–∞—Ç–∞ –Ω–µ —ñ—Å–Ω—É—î' });
      }
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏:', err);
    }
  });

  // –°—Ç–∞—Ä—Ç –≥—Ä–∏
  socket.on('startGame', async (roomId) => {
    console.log(`üé≤ –ü–æ—á–∞—Ç–æ–∫ –≥—Ä–∏ –≤ –∫—ñ–º–Ω–∞—Ç—ñ ${roomId}, —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä: ${socket.username}`);
    
    try {
    const room = await Room.findOne({ roomId });
      if (!room) {
        console.log(`‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ—á–∞—Ç–∏ –≥—Ä—É - –∫—ñ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
        return;
      }
      
      // Check if game is already started
      if (room.gameStarted) {
        console.log(`‚ö†Ô∏è –ì—Ä–∞ –≤ –∫—ñ–º–Ω–∞—Ç—ñ ${roomId} –≤–∂–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∞`);
        socket.emit('errorMessage', { message: "–ì—Ä–∞ –≤–∂–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∞!" });
        
        // Re-send game state to the player who tried to start again
        const gameState = gameStates[roomId];
        if (gameState) {
          // Send the player their hand
          if (gameState.hands[socket.username]) {
            socket.emit('handDealt', {
              hand: gameState.hands[socket.username],
              discardTop: gameState.discardPile[gameState.discardPile.length - 1]
            });
          }
          
          // Create player info list
          const playersList = room.players.map(player => ({
            id: player,
            name: player,
            handSize: gameState.hands[player] ? gameState.hands[player].length : 0
          }));
          
          // Re-send game state
          socket.emit('gameStarted', {
            players: playersList,
            discardTop: gameState.discardPile[gameState.discardPile.length - 1]
          });
          
          // Re-send current player's turn
          const currentPlayerId = room.players[gameState.currentPlayerIndex];
          socket.emit('turnChanged', { currentPlayerId });
        }
        return;
      }

      // ALWAYS check for and remove duplicate players
      const uniquePlayers = [...new Set(room.players)];
      if (uniquePlayers.length !== room.players.length) {
        console.log(`‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤. –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫...`);
        console.log(`–ë—É–ª–æ: ${JSON.stringify(room.players)}`);
        room.players = uniquePlayers;
        await room.save();
        console.log(`–°—Ç–∞–ª–æ: ${JSON.stringify(room.players)}`);
        
        // Update the client with the new player list
        const updatedPlayersList = room.players.map(player => ({
          id: player,
          name: player,
          handSize: 0
        }));
        io.to(roomId).emit('playerJoined', { players: updatedPlayersList });
      }

      // Now check if we have enough players
    if (room.players.length < 2) {
      io.to(roomId).emit('errorMessage', { message: "–ú—ñ–Ω—ñ–º—É–º 2 –≥—Ä–∞–≤—Ü—ñ –¥–ª—è —Å—Ç–∞—Ä—Ç—É –≥—Ä–∏!" });
        console.log(`‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ—á–∞—Ç–∏ –≥—Ä—É - –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–∞–≤—Ü—ñ–≤ (${room.players.length})`);
      return;
    }

      // Log players in the room before starting
      console.log(`üë• –ì—Ä–∞–≤—Ü—ñ –≤ –∫—ñ–º–Ω–∞—Ç—ñ ${roomId} –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –≥—Ä–∏: ${JSON.stringify(room.players)}`);

      // Get connected sockets in the room to verify
      const socketsInRoom = await io.in(roomId).fetchSockets();
      console.log(`üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω—ñ —Å–æ–∫–µ—Ç–∏ –≤ –∫—ñ–º–Ω–∞—Ç—ñ ${roomId}: ${socketsInRoom.length}`);
      console.log(socketsInRoom.map(s => `${s.username} (${s.id})`).join(', '));

      // Mark the room as having a started game
      room.gameStarted = true;
      await room.save();
      console.log(`üé≤ –ì—Ä–∞ –≤ –∫—ñ–º–Ω–∞—Ç—ñ ${roomId} –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ —Ä–æ–∑–ø–æ—á–∞—Ç–∞`);

      // We'll notify clients to redirect only after game state is fully prepared

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–∞ —Ç–∞—Å—É—î–º–æ –∫–æ–ª–æ–¥—É
    let deck = shuffleDeck(generateDeck());
    // –†–æ–∑–¥–∞—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∏ –≥—Ä–∞–≤—Ü—è–º
    const { hands, deck: newDeck } = dealCards(deck, room.players);

    // –í–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à—É –∫–∞—Ä—Ç—É –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è, —â–æ –Ω–µ —î —á–æ—Ä–Ω–æ—é –∞–±–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—é
    let discardTopCard;
    let deckAfterFirst = [...newDeck]; // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –∫–æ–ª–æ–¥–∏
    
    // –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –∫–∞—Ä—Ç
    const specialValues = [
      "–ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É", 
      "–û–±–µ—Ä—Ç–∞–Ω–Ω—è —Ö–æ–¥—É", 
      "+3 –∫–∞—Ä—Ç–∏–Ω–∏", 
      "+5 –∫–∞—Ä—Ç", 
      "–§–æ—Ä—Ç–£–Ω–æ"
    ];
    
    // –í–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à—É –∑–≤–∏—á–∞–π–Ω—É –∫–∞—Ä—Ç—É (–Ω–µ —á–æ—Ä–Ω—É —ñ –Ω–µ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É)
    do {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —â–µ –∫–∞—Ä—Ç–∏–Ω–∏
      if (deckAfterFirst.length === 0) {
        // –Ø–∫—â–æ –Ω–µ–º–∞—î, –ø–µ—Ä–µ–º—ñ—â–∞—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∏–Ω–∏ –∑ –∫—ñ–Ω—Ü—è –Ω–∞–∑–∞–¥
        console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–≤–∏—á–∞–π–Ω—É –∫–∞—Ä—Ç—É, –ø–µ—Ä–µ–º—ñ—à—É—î–º–æ –∫–æ–ª–æ–¥—É");
        deckAfterFirst = shuffleDeck(deckAfterFirst);
        // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ–º—É —Ü–∏–∫–ª—É, —è–∫—â–æ –≤—Å—ñ –∫–∞—Ä—Ç–∏–Ω–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ
        if (deckAfterFirst.length > 0) {
          discardTopCard = deckAfterFirst.shift();
          break;
        }
      }
      
      discardTopCard = deckAfterFirst.shift(); // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—É –∫–∞—Ä—Ç—É
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–∞—Ä—Ç–∞ —á–æ—Ä–Ω–∞ –∞–±–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∞
      const isBlackOrSpecial = 
        discardTopCard.color === "black" || 
        specialValues.includes(discardTopCard.value);
      
      // –Ø–∫—â–æ –∫–∞—Ä—Ç–∞ —á–æ—Ä–Ω–∞ –∞–±–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∞, –ø–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ —ó—ó –≤ –∫—ñ–Ω–µ—Ü—å –∫–æ–ª–æ–¥–∏
      if (isBlackOrSpecial) {
        deckAfterFirst.push(discardTopCard);
      }
    } while (
      (discardTopCard.color === "black" || 
       specialValues.includes(discardTopCard.value)) && 
      deckAfterFirst.length > 0
    );
    
    console.log(`–ü–µ—Ä—à–∞ –∫–∞—Ä—Ç–∞: ${discardTopCard.color} ${discardTopCard.value}`);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∫–∏–¥ –∑ –ø–µ—Ä—à–æ—é –∫–∞—Ä—Ç–æ—é
    const discardPile = [discardTopCard];

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –≥—Ä–∏ —É –ø–∞–º'—è—Ç—ñ
    gameStates[roomId] = {
      deck: deckAfterFirst,
      hands,
      discardPile,
      currentPlayerIndex: 0, // –ü–æ—á–∏–Ω–∞—î –ø–µ—Ä—à–∏–π –≥—Ä–∞–≤–µ—Ü—å
      direction: 1 // 1 - –∑–∞ –≥–æ–¥–∏–Ω–Ω–∏–∫–æ–≤–æ—é, -1 - –ø—Ä–æ—Ç–∏
    };

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ–∂–Ω–æ–º—É –≥—Ä–∞–≤—Ü—é –π–æ–≥–æ —Ä—É–∫—É
      for (const username of room.players) {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–æ–∫–µ—Ç-—ñ–¥ –≥—Ä–∞–≤—Ü—è –∑–∞ –π–æ–≥–æ –Ω—ñ–∫–Ω–µ–π–º–æ–º
        const playerSocketId = findSocketIdByUsername(username);
        if (playerSocketId) {
          io.to(playerSocketId).emit('handDealt', {
            hand: hands[username],
        discardTop: discardPile[0]
      });
    }
      }
      
      // Create player info objects with details for the UI
      const playerInfoList = room.players.map(username => ({
        id: username,
        name: username,
        handSize: hands[username] ? hands[username].length : 0
      }));
      
    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —Å—Ç–æ–ª—É –¥–ª—è –≤—Å—ñ—Ö
    io.to(roomId).emit('gameStarted', {
        players: playerInfoList,
      discardTop: discardPile[0]
    });
    
      // Send the first player's turn
      const firstPlayerUsername = room.players[0];
      console.log(`üéÆ –ü–µ—Ä—à–∏–π —Ö—ñ–¥: ${firstPlayerUsername}`);
      
    io.to(roomId).emit('turnChanged', {
        currentPlayerId: firstPlayerUsername
      });
      
      // Now that the game state is fully prepared, redirect clients to the game room
      console.log(`üîÑ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–æ —ñ–≥—Ä–æ–≤–æ—ó –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}`);
      
      // More aggressive redirection strategy with multiple attempts
      const sendRedirects = (attempts = 1) => {
        // First verify that the room still exists
        Room.findOne({ roomId }).then(roomCheck => {
          if (roomCheck && roomCheck.gameStarted) {
            console.log(`üîÑ –°–ø—Ä–æ–±–∞ #${attempts}: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–æ —ñ–≥—Ä–æ–≤–æ—ó –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}`);
            
            // Send to all sockets in the room
            io.to(roomId).emit('redirectToGameRoom', { roomId });
            
            // Get all sockets to make sure they receive the redirect
            io.in(roomId).fetchSockets().then(sockets => {
              // Send individually to each socket as a backup
              sockets.forEach(s => {
                s.emit('redirectToGameRoom', { roomId });
              });
              
              console.log(`üîÑ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ —Ä–µ–¥—ñ—Ä–µ–∫—Ç–∏ –¥–ª—è ${sockets.length} –≥—Ä–∞–≤—Ü—ñ–≤`);
              
              // Schedule another attempt with increasing delay if we haven't reached max attempts
              if (attempts < 3) {
                setTimeout(() => sendRedirects(attempts + 1), attempts * 1000);
              }
            });
          } else {
            console.log(`‚ö†Ô∏è –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –±—ñ–ª—å—à–µ –Ω–µ —ñ—Å–Ω—É—î –∞–±–æ –≥—Ä–∞ –Ω–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è`);
          }
        }).catch(err => console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫—ñ–º–Ω–∞—Ç–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º:', err));
      };
      
      // Start sending redirects with a short initial delay
      setTimeout(() => sendRedirects(), 500);
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –≥—Ä–∏:', err);
    }
  });

  // –î–æ–¥–∞—î–º–æ –¥–æ–ø–æ–º—ñ–∂–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
  async function getNextPlayerIndex(state, roomId) {
    try {
      const room = await Room.findOne({ roomId });
      if (!room) {
        console.warn(`‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É ${roomId} –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è`);
        return (state.currentPlayerIndex + state.direction + Object.keys(state.hands).length) % Object.keys(state.hands).length;
      }
      
      const n = room.players.length;
    return (state.currentPlayerIndex + state.direction + n) % n;
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤ getNextPlayerIndex:', err);
      return (state.currentPlayerIndex + state.direction + Object.keys(state.hands).length) % Object.keys(state.hands).length;
    }
  }

  // –í–∏–∫–ª–∞–¥–∞–Ω–Ω—è –∫–∞—Ä—Ç–∏–Ω–∏
  socket.on('playCard', async ({ roomId, card }) => {
    const state = gameStates[roomId];
    if (!state) return;
    
    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π
    if (!socket.username) {
      socket.emit('authError', { message: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' });
      return;
    }
    
    try {
      // Get the room to access players list
      const room = await Room.findOne({ roomId });
      if (!room) {
        console.warn(`‚ö†Ô∏è –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –∑—ñ–≥—Ä–∞—Ç–∏ –∫–∞—Ä—Ç—É`);
        return;
      }
      
      // Use the room's players array to determine the current player
      const currentPlayerId = room.players[state.currentPlayerIndex];
      
      if (socket.username !== currentPlayerId) {
        console.log(`‚ö†Ô∏è –ì—Ä–∞–≤–µ—Ü—å ${socket.username} –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø–æ—Ö–æ–¥–∏—Ç–∏ –Ω–µ –≤ —Å–≤—ñ–π —Ö—ñ–¥`);
        socket.emit('actionBlocked', { message: '–ó–∞—Ä–∞–∑ –Ω–µ –≤–∞—à —Ö—ñ–¥' });
        return; // –ù–µ —Ç–≤—ñ–π —Ö—ñ–¥
      }
  
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ —î –∫–∞—Ä—Ç–∞ —É —Ä—É—Ü—ñ –≥—Ä–∞–≤—Ü—è
      const hand = state.hands[socket.username];
      const cardIndex = hand.findIndex(
        c => c.value === card.value && c.color === card.color
      );
      if (cardIndex === -1) return; // –ù–µ–º–∞—î —Ç–∞–∫–æ—ó –∫–∞—Ä—Ç–∏–Ω–∏
  
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª (—Å–ø—Ä–æ—â–µ–Ω–æ)
      const top = state.discardPile[state.discardPile.length - 1];
      let canPlay = false;

      if (top.color === "black" && top.chosenColor) {
        // –ü—ñ—Å–ª—è —á–æ—Ä–Ω–æ—ó –∫–∞—Ä—Ç–∏–Ω–∏ –¥–æ–∑–≤–æ–ª—è—î—Ç—å—Å—è –∫–ª–∞—Å—Ç–∏ –ª–∏—à–µ –æ–±—Ä–∞–Ω–∏–π –∫–æ–ª—ñ—Ä –∞–±–æ —á–æ—Ä–Ω—É
        canPlay = (card.color === top.chosenColor) || (card.color === "black");
      } else {
        canPlay =
          card.color === top.color ||
          card.value === top.value ||
          card.color === "black" ||
          card.value === "–§–æ—Ä—Ç–£–Ω–æ";
      }
      if (!canPlay) return; // –ù–µ –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∞—Å—Ç–∏
  
      // –í–∏–¥–∞–ª—è—î–º–æ –∫–∞—Ä—Ç—É –∑ —Ä—É–∫–∏
      hand.splice(cardIndex, 1);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∫–∞—Ä—Ç–∞ –§–æ—Ä—Ç—É–Ω–æ
      if (card.value === "–§–æ—Ä—Ç–£–Ω–æ" && card.chosenColor) {
        // –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç—É —É —Å–∫–∏–¥–∞–Ω–Ω—è
        state.discardPile.push(card);
        
        // –ë–ª–æ–∫—É—î–º–æ —Ö–æ–¥–∏ —ñ–Ω—à–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –ø—ñ–¥ —á–∞—Å –¥—ñ—ó –§–æ—Ä—Ç—É–Ω–æ
        state.fortunoPending = true;
        state.fortunoPlayerId = socket.username;
        
        // –í–∏–∫–æ–Ω—É—î–º–æ –∫–∏–¥–æ–∫ –∫—É–±–∏–∫–∞ –¥–ª—è –§–æ—Ä—Ç—É–Ω–æ - –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ —Ä—ñ–≤–Ω—ñ —à–∞–Ω—Å–∏
        const diceResult = Math.floor(Math.random() * 6) + 1;
        card.diceResult = diceResult;
        
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –ø—Ä–æ –∫–∏–¥–æ–∫ –∫—É–±–∏–∫–∞ –∑ –æ–¥–Ω–∞–∫–æ–≤–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        io.to(roomId).emit('fortunoDiceRolled', { 
          diceResult,
          playerId: socket.username
        });
        
        // –ù–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –µ—Ñ–µ–∫—Ç –æ–¥—Ä–∞–∑—É, –∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –∫—É–±–∏–∫–∞
        state.pendingFortunoEffect = diceResult;
        
        // If this is the second-to-last card, delay the FORTUNO button
        if (hand.length === 1) {
          // Store that we need to show FORTUNO button after dice roll
          state.pendingFortunoButton = true;
        }
      } else {
        // –ë–ª–æ–∫—É—î–º–æ —Ö—ñ–¥, —è–∫—â–æ –æ—á—ñ–∫—É—î—Ç—å—Å—è –¥—ñ—è –§–æ—Ä—Ç—É–Ω–æ
        if (state.fortunoPending && socket.username !== state.fortunoPlayerId) {
          // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–∞—Ä—Ç—É –≥—Ä–∞–≤—Ü—é
          hand.push(card);
          // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≥—Ä–∞–≤—Ü—è, —â–æ —Ö—ñ–¥ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ
          io.to(socket.id).emit('actionBlocked', { message: '–û—á—ñ–∫—É—î—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ—ó –§–æ—Ä—Ç—É–Ω–æ' });
          return;
        }
        
        // –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –∫–∞—Ä—Ç - –∑–≤–∏—á–∞–π–Ω–∞ –ª–æ–≥—ñ–∫–∞
        state.discardPile.push(card);
      
        // –Ø–∫—â–æ –∫–∞—Ä—Ç–∞ +3 –∞–±–æ +5 ‚Äî –¥–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –≥—Ä–∞–≤—Ü—é –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç
        if (card.value === "+3 –∫–∞—Ä—Ç–∏–Ω–∏" || card.value === "+5 –∫–∞—Ä—Ç") {
          const count = card.value === "+3 –∫–∞—Ä—Ç–∏–Ω–∏" ? 3 : 5;
          const nextIndex = await getNextPlayerIndex(state, roomId);
          const nextPlayerId = room.players[nextIndex];
          for (let i = 0; i < count; i++) {
            if (state.deck.length > 0) {
              state.hands[nextPlayerId].push(state.deck.shift());
            }
          }
          // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–æ–∫–µ—Ç-—ñ–¥ –≥—Ä–∞–≤—Ü—è –∑–∞ –π–æ–≥–æ –Ω—ñ–∫–Ω–µ–π–º–æ–º
          const nextPlayerSocketId = findSocketIdByUsername(nextPlayerId);
          if (nextPlayerSocketId) {
            io.to(nextPlayerSocketId).emit('updateHandAndDiscard', {
              hand: state.hands[nextPlayerId],
              discardTop: card
            });
          }
          // –•—ñ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –æ–ø–æ–Ω–µ–Ω—Ç–∞ (–Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è)
          state.currentPlayerIndex = nextIndex;
        } else if (card.value === "–ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É") {
          // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
          const n = room.players.length;
          state.currentPlayerIndex = (state.currentPlayerIndex + 2 * state.direction + n) % n;
        } else if (card.value === "–û–±–µ—Ä—Ç–∞–Ω–Ω—è —Ö–æ–¥—É") {
          const n = room.players.length;
          if (n === 2) {
            // –î–ª—è –¥–≤–æ—Ö –≥—Ä–∞–≤—Ü—ñ–≤ ‚Äî —è–∫ –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É (–≥—Ä–∞–≤–µ—Ü—å —Ö–æ–¥–∏—Ç—å —â–µ —Ä–∞–∑)
            state.currentPlayerIndex = (state.currentPlayerIndex + 2 * state.direction + n) % n;
          } else {
            // –î–ª—è 3+ –≥—Ä–∞–≤—Ü—ñ–≤ ‚Äî –∑–º—ñ–Ω—é—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫
            state.direction *= -1;
            // –ü—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º–∫—É —Ö—ñ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —É –Ω–æ–≤–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É
            state.currentPlayerIndex = (state.currentPlayerIndex + state.direction + n) % n;
          }
        } else {
          // –ü–µ—Ä–µ–¥–∞—Ç–∏ —Ö—ñ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É
          state.currentPlayerIndex = await getNextPlayerIndex(state, roomId);
        }
      }

      // Check if player has only one card left after playing
      if (hand.length === 1 && !state.pendingFortunoButton) {
        // Start FORTUNO event
        state.fortunoState = {
          playerWithOneCard: socket.username,
          fortunoButtonVisible: true,
          fortunoButtonClickedBy: null,
          fortunoButtonTimeout: setTimeout(async () => {
            const state = gameStates[roomId];
            if (!state || !state.fortunoState) return;

            const playerToDrawCards = state.fortunoState.playerWithOneCard;
            
            // Add 2 cards to the player who didn't say FORTUNO
            const cardsToAdd = state.deck.slice(0, 2);
            state.deck = state.deck.slice(2);

            if (state.hands[playerToDrawCards]) {
              state.hands[playerToDrawCards].push(...cardsToAdd);
            }

            // Hide FORTUNO button
            io.to(roomId).emit('hideFortunoButton');

            // Notify all players
            io.to(roomId).emit('fortunoTimeout', {
              penalizedPlayer: playerToDrawCards,
              message: `${playerToDrawCards} –Ω–µ –≤—Å—Ç–∏–≥ —Å–∫–∞–∑–∞—Ç–∏ FORTUNO! +2 –∫–∞—Ä—Ç–∏–Ω–∏.`
            });

            // Update the penalized player's hand
            const penalizedSocket = findSocketIdByUsername(playerToDrawCards);
            if (penalizedSocket) {
              io.to(penalizedSocket).emit('updateHandAndDiscard', {
                hand: state.hands[playerToDrawCards],
                discardTop: state.discardPile[state.discardPile.length - 1]
              });
            }

            // Reset FORTUNO state
            state.fortunoState = {
              playerWithOneCard: null,
              fortunoButtonVisible: false,
              fortunoButtonClickedBy: null,
              fortunoButtonTimeout: null,
              fortunoSaid: false
            };

            // Update all players about the new hand sizes
            await emitPlayersState(roomId);
          }, 5000) // 5 seconds to say FORTUNO
        };
        
        // Show FORTUNO button to all players
        io.to(roomId).emit('showFortunoButton');
      }

      // Check for win condition
      if (hand.length === 0) {
        // Check if player said FORTUNO before winning
        if (state.fortunoState && 
            (state.fortunoState.fortunoButtonClickedBy === socket.username ||
             state.fortunoState.fortunoSaid)) {
          // Player wins!
          console.log(`üèÜ –ì—Ä–∞–≤–µ—Ü—å ${socket.username} –ø–µ—Ä–µ–º—ñ–≥ —É –≥—Ä—ñ!`);
          
          // First notify all players about the win
          io.to(roomId).emit('gameWon', {
            winner: socket.username,
            message: `${socket.username} –ø–µ—Ä–µ–º—ñ–≥ —É –≥—Ä—ñ!`
          });

          // Clear any pending FORTUNO states
          if (state.fortunoState && state.fortunoState.fortunoButtonTimeout) {
            clearTimeout(state.fortunoState.fortunoButtonTimeout);
          }
          
          // Hide FORTUNO button for all players
          io.to(roomId).emit('hideFortunoButton');

          try {
            // Update room state in database
            room.gameStarted = false;
            await room.save();
            
            // Clear game state AFTER all notifications are sent
            delete gameStates[roomId];
            
            // Delete the room immediately
            await Room.deleteOne({ roomId });
            
            console.log(`üéÆ –ì—Ä–∞ –≤ –∫—ñ–º–Ω–∞—Ç—ñ ${roomId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å: ${socket.username}`);
            console.log(`üóëÔ∏è –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –≤–∏–¥–∞–ª–µ–Ω–∞ –ø—ñ—Å–ª—è –ø–µ—Ä–µ–º–æ–≥–∏`);
          } catch (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –≥—Ä–∏:', err);
          }
          
          return; // Exit early to prevent further game state updates
        } else {
          // Player didn't say FORTUNO - add 2 cards
          console.log(`‚ö†Ô∏è –ì—Ä–∞–≤–µ—Ü—å ${socket.username} –Ω–µ —Å–∫–∞–∑–∞–≤ FORTUNO –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–º–æ–≥–æ—é, +2 –∫–∞—Ä—Ç–∏–Ω–∏`);
          
          const cardsToAdd = state.deck.slice(0, 2);
          state.deck = state.deck.slice(2);
          state.hands[socket.username].push(...cardsToAdd);

          io.to(roomId).emit('fortunoMissed', {
            player: socket.username,
            message: `${socket.username} –∑–∞–±—É–≤ —Å–∫–∞–∑–∞—Ç–∏ FORTUNO! +2 –∫–∞—Ä—Ç–∏–Ω–∏.`
          });

          // Update player's hand
          socket.emit('updateHandAndDiscard', {
            hand: state.hands[socket.username],
            discardTop: state.discardPile[state.discardPile.length - 1]
          });
          
          // Update all players about the new hand sizes
          await emitPlayersState(roomId);
          
          // Continue the game - move to next player
          state.currentPlayerIndex = await getNextPlayerIndex(state, roomId);
          io.to(roomId).emit('turnChanged', {
            currentPlayerId: room.players[state.currentPlayerIndex]
          });
          
          return; // Exit to prevent further updates
        }
      }

      // –û–Ω–æ–≤–∏—Ç–∏ —Ä—É–∫–∏ –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤ –∑ –ë–î
      for (const playerId of room.players) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–ª—è —Ü—å–æ–≥–æ –≥—Ä–∞–≤—Ü—è —Ä—É–∫–∞ –≤ —Å—Ç–∞–Ω—ñ –≥—Ä–∏
        if (state.hands[playerId]) {
          // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–æ–∫–µ—Ç-—ñ–¥ –≥—Ä–∞–≤—Ü—è –∑–∞ –π–æ–≥–æ –Ω—ñ–∫–Ω–µ–π–º–æ–º
          const playerSocketId = findSocketIdByUsername(playerId);
          if (playerSocketId) {
            io.to(playerSocketId).emit('updateHandAndDiscard', {
              hand: state.hands[playerId],
              discardTop: card
            });
          }
        }
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç —É –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
      await emitPlayersState(roomId);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ö—ñ–¥
      const nextPlayerIndex = state.currentPlayerIndex;
      const nextPlayerId = room.players[nextPlayerIndex];
      
      if (state.skipNextTurn === nextPlayerId) {
        // –¶–µ–π –≥—Ä–∞–≤–µ—Ü—å –º–∞—î –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ö—ñ–¥, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
        state.currentPlayerIndex = await getNextPlayerIndex(state, roomId);
        // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–ø—É—Å–∫—É —Ö–æ–¥—É
        delete state.skipNextTurn;
        
        // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –ø—Ä–æ –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É
        io.to(roomId).emit('turnSkipped', { 
          skippedPlayerId: nextPlayerId,
          currentPlayerId: room.players[state.currentPlayerIndex]
        });
      }
      
      // –û–Ω–æ–≤–∏—Ç–∏ —Ö—ñ–¥
      io.to(roomId).emit('turnChanged', {
        currentPlayerId: room.players[state.currentPlayerIndex]
      });
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—ñ–≥—Ä–∞–Ω–Ω—ñ –∫–∞—Ä—Ç–∏:', err);
    }
  });

  socket.on('fortunoClicked', async ({ roomId }) => {
    try {
      const state = gameStates[roomId];
      if (!state || !state.fortunoState || !state.fortunoState.fortunoButtonVisible) {
        return;
      }

      // Clear the timeout since someone clicked
      if (state.fortunoState.fortunoButtonTimeout) {
        clearTimeout(state.fortunoState.fortunoButtonTimeout);
      }

      state.fortunoState.fortunoButtonVisible = false;
      state.fortunoState.fortunoButtonClickedBy = socket.username;

      // Hide FORTUNO button for all players
      io.to(roomId).emit('hideFortunoButton');

      // If the player with one card clicked FORTUNO
      if (socket.username === state.fortunoState.playerWithOneCard) {
        console.log(`‚úÖ –ì—Ä–∞–≤–µ—Ü—å ${socket.username} —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞–∑–∞–≤ FORTUNO`);
        
        // Mark FORTUNO as said and keep the state for win condition check
        state.fortunoState = {
          playerWithOneCard: socket.username,
          fortunoButtonVisible: false,
          fortunoButtonClickedBy: socket.username,
          fortunoButtonTimeout: null,
          fortunoSaid: true
        };

        io.to(roomId).emit('fortunoSuccess', {
          player: socket.username,
          message: `${socket.username} —Å–∫–∞–∑–∞–≤ FORTUNO!`
        });
      } else {
        console.log(`‚ùå –ì—Ä–∞–≤–µ—Ü—å ${socket.username} —Å–∫–∞–∑–∞–≤ FORTUNO –∑–∞–º—ñ—Å—Ç—å ${state.fortunoState.playerWithOneCard}`);
        
        // Someone else clicked - give 2 cards to the player who had one card
        const playerToDrawCards = state.fortunoState.playerWithOneCard;
        const cardsToAdd = state.deck.slice(0, 2);
        state.deck = state.deck.slice(2);

        if (state.hands[playerToDrawCards]) {
          state.hands[playerToDrawCards].push(...cardsToAdd);
        }

        // Notify all players
        io.to(roomId).emit('fortunoFailed', {
          clickedBy: socket.username,
          penalizedPlayer: playerToDrawCards,
          message: `${socket.username} —Å–∫–∞–∑–∞–≤ FORTUNO —Ä–∞–Ω—ñ—à–µ –∑–∞ ${playerToDrawCards}! ${playerToDrawCards} –æ—Ç—Ä–∏–º—É—î +2 –∫–∞—Ä—Ç–∏–Ω–∏.`
        });

        // Update the penalized player's hand
        const penalizedSocket = findSocketIdByUsername(playerToDrawCards);
        if (penalizedSocket) {
          io.to(penalizedSocket).emit('updateHandAndDiscard', {
            hand: state.hands[playerToDrawCards],
            discardTop: state.discardPile[state.discardPile.length - 1]
          });
        }
        
        // Reset FORTUNO state completely
        state.fortunoState = null;
        
        // Move to the next player's turn
        state.currentPlayerIndex = await getNextPlayerIndex(state, roomId);
        io.to(roomId).emit('turnChanged', {
          currentPlayerId: room.players[state.currentPlayerIndex]
        });
      }

      // Update all players about the new hand sizes
      await emitPlayersState(roomId);
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤ fortunoClicked:', err);
    }
  });

  // –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –∫—É–±–∏–∫–∞ - –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ —Å–µ—Ä–≤–µ—Ä
  socket.on('fortunoDiceFinished', async ({ roomId }) => {
    try {
      const state = gameStates[roomId];
      if (!state || !state.fortunoPending || !state.pendingFortunoEffect) return;
      
      // Get the room to access players list
      const room = await Room.findOne({ roomId });
      if (!room) {
        console.warn(`‚ö†Ô∏è –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫—É–±–∏–∫–∞ –§–æ—Ä—Ç—É–Ω–æ`);
        return;
      }
      
      const diceResult = state.pendingFortunoEffect;
      
      // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –µ—Ñ–µ–∫—Ç –∫–∞—Ä—Ç–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∫—É–±–∏–∫–∞
      switch (diceResult) {
        case 1: // +1 –∫–∞—Ä—Ç–∞ —Ç–∞ –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É
          // –î–æ–¥–∞—î–º–æ 1 –∫–∞—Ä—Ç—É –≥—Ä–∞–≤—Ü—é, —è–∫–∏–π –≤–∏–∫–ª–∞–≤ –§–æ—Ä—Ç—É–Ω–æ
          if (state.deck.length > 0) {
            state.hands[state.fortunoPlayerId].push(state.deck.shift());
          }
          // –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É - –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
          state.currentPlayerIndex = await getNextPlayerIndex(state, roomId);
          // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –≥—Ä—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ—ó
          state.fortunoPending = false;
          break;
          
        case 2: // +3 –∫–∞—Ä—Ç–∏–Ω–∏ —Ç–∞ –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É
          // –î–æ–¥–∞—î–º–æ 3 –∫–∞—Ä—Ç–∏–Ω–∏ –≥—Ä–∞–≤—Ü—é, —è–∫–∏–π –≤–∏–∫–ª–∞–≤ –§–æ—Ä—Ç—É–Ω–æ
          for (let i = 0; i < 3; i++) {
            if (state.deck.length > 0) {
              state.hands[state.fortunoPlayerId].push(state.deck.shift());
            }
          }
          // –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É - –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
          state.currentPlayerIndex = await getNextPlayerIndex(state, roomId);
          // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –≥—Ä—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ—ó
          state.fortunoPending = false;
          break;
          
        case 3: // –û–±–º—ñ–Ω –∫–∞—Ä—Ç–∞–º–∏ –∑ —É—Å—ñ–º–∞ –≥—Ä–∞–≤—Ü—è–º–∏ –ø–æ —á–∞—Å–æ–≤—ñ–π —Å—Ç—Ä—ñ–ª—Ü—ñ —Ç–∞ –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É
          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–ø—ñ—é —Ä—É–∫
          const hands = {...state.hands};
          // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
          const currentIndex = room.players.indexOf(state.fortunoPlayerId);
          // –û–±–º—ñ–Ω—é—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∏
          for (let i = 0; i < room.players.length; i++) {
            const fromPlayerId = room.players[i];
            const toIndex = (i + 1) % room.players.length;
            const toPlayerId = room.players[toIndex];
            state.hands[toPlayerId] = hands[fromPlayerId];
          }
          // –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É - –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
          state.currentPlayerIndex = await getNextPlayerIndex(state, roomId);
          // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –≥—Ä—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ—ó
          state.fortunoPending = false;
          break;
          
        case 4: // -1 –∫–∞—Ä—Ç–∞ —Ç–∞ –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É
          // –ë–ª–æ–∫—É—î–º–æ –≥—Ä—É –¥–æ –≤–∏–±–æ—Ä—É –∫–∞—Ä—Ç–∏
          // –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É –ø–æ–¥—ñ—ó discardCard
          
          // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≥—Ä–∞–≤—Ü—è, —â–æ –π–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–∞—Ç–∏ –∫–∞—Ä—Ç—É –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è
          const fortunoPlayerSocketId = findSocketIdByUsername(state.fortunoPlayerId);
          if (fortunoPlayerSocketId) {
            io.to(fortunoPlayerSocketId).emit('chooseCardToDiscard');
          }
          
          // –•—ñ–¥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –≥—Ä–∞–≤–µ—Ü—å –≤–∏–±–µ—Ä–µ –∫–∞—Ä—Ç—É
          // (–æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤ —ñ–Ω—à—ñ–π –ø–æ–¥—ñ—ó - discardCard)
          break;
          
        case 5: // –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É —Ç–æ–º—É, —Ö—Ç–æ –≤–∏–∫–ª–∞–≤ –∫–∞—Ä—Ç—É –§–æ—Ä—Ç—É–Ω–æ
          // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ö—ñ–¥
          state.currentPlayerIndex = await getNextPlayerIndex(state, roomId);
          
          // –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å, —â–æ —Ü–µ–π –≥—Ä–∞–≤–µ—Ü—å –º–∞—î –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Å–≤—ñ–π –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ö—ñ–¥
          state.skipNextTurn = state.fortunoPlayerId;
          
          // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –≥—Ä—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ—ó
          state.fortunoPending = false;
          break;
          
        case 6: // –ì—Ä–∞–≤–µ—Ü—å –∑–∞–±–∏—Ä–∞—î –∫–∞—Ä—Ç—É –Ω–∞–∑–∞–¥ —Ç–∞ –ø—Ä–æ–ø—É—Å–∫–∞—î —Ö—ñ–¥
          // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–∞—Ä—Ç—É –§–æ—Ä—Ç—É–Ω–æ –≥—Ä–∞–≤—Ü—é
          const fortunoCard = state.discardPile.pop();
          // –í–∏–¥–∞–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∏–¥–∫–∞ —ñ –æ–±—Ä–∞–Ω–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
          delete fortunoCard.diceResult;
          delete fortunoCard.chosenColor;
          state.hands[state.fortunoPlayerId].push(fortunoCard);
          
          // –ü—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É - –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
          state.currentPlayerIndex = await getNextPlayerIndex(state, roomId);
          // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –≥—Ä—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ—ó
          state.fortunoPending = false;
          break;
      }
      
      // –í–∏–¥–∞–ª—è—î–º–æ –æ—á—ñ–∫—É—é—á–∏–π –µ—Ñ–µ–∫—Ç
      delete state.pendingFortunoEffect;
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Ä—É–∫–∏ –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤ –∑ –ë–î
      for (const playerId of room.players) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –¥–ª—è —Ü—å–æ–≥–æ –≥—Ä–∞–≤—Ü—è —Ä—É–∫–∞ –≤ —Å—Ç–∞–Ω—ñ –≥—Ä–∏
        if (state.hands[playerId]) {
          // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–æ–∫–µ—Ç-—ñ–¥ –≥—Ä–∞–≤—Ü—è –∑–∞ –Ω—ñ–∫–Ω–µ–π–º–æ–º
          const playerSocketId = findSocketIdByUsername(playerId);
          if (playerSocketId) {
            io.to(playerSocketId).emit('updateHandAndDiscard', {
              hand: state.hands[playerId],
              discardTop: state.discardPile[state.discardPile.length - 1]
            });
          }
        }
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç —É –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
      await emitPlayersState(roomId);
      
      // If we need to show FORTUNO button after dice roll
      if (state.pendingFortunoButton) {
        // Clear the flag
        delete state.pendingFortunoButton;
        
        // Start FORTUNO event
        state.fortunoState = {
          playerWithOneCard: socket.username,
          fortunoButtonVisible: true,
          fortunoButtonClickedBy: null,
          fortunoButtonTimeout: setTimeout(async () => {
            const state = gameStates[roomId];
            if (!state || !state.fortunoState) return;

            const playerToDrawCards = state.fortunoState.playerWithOneCard;
            
            // Add 2 cards to the player who didn't say FORTUNO
            const cardsToAdd = state.deck.slice(0, 2);
            state.deck = state.deck.slice(2);

            if (state.hands[playerToDrawCards]) {
              state.hands[playerToDrawCards].push(...cardsToAdd);
            }

            // Hide FORTUNO button
            io.to(roomId).emit('hideFortunoButton');

            // Notify all players
            io.to(roomId).emit('fortunoTimeout', {
              penalizedPlayer: playerToDrawCards,
              message: `${playerToDrawCards} –Ω–µ –≤—Å—Ç–∏–≥ —Å–∫–∞–∑–∞—Ç–∏ FORTUNO! +2 –∫–∞—Ä—Ç–∏–Ω–∏.`
            });

            // Update the penalized player's hand
            const penalizedSocket = findSocketIdByUsername(playerToDrawCards);
            if (penalizedSocket) {
              io.to(penalizedSocket).emit('updateHandAndDiscard', {
                hand: state.hands[playerToDrawCards],
                discardTop: state.discardPile[state.discardPile.length - 1]
              });
            }

            // Reset FORTUNO state
            state.fortunoState = {
              playerWithOneCard: null,
              fortunoButtonVisible: false,
              fortunoButtonClickedBy: null,
              fortunoButtonTimeout: null,
              fortunoSaid: false
            };

            // Update all players about the new hand sizes
            await emitPlayersState(roomId);
          }, 5000) // 5 seconds to say FORTUNO
        };
        
        // Show FORTUNO button to all players
        io.to(roomId).emit('showFortunoButton');
      }
      
      // –Ø–∫—â–æ –¥—ñ—è –Ω–µ –≤–∏–º–∞–≥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –≤–∏–±–æ—Ä—É (–≤–∏–ø–∞–¥–æ–∫ 4)
      if (diceResult !== 4) {
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ö–æ–¥—É –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º
        const currentPlayerId = room.players[state.currentPlayerIndex];
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ö—ñ–¥
        if (state.skipNextTurn === currentPlayerId) {
          // –¶–µ–π –≥—Ä–∞–≤–µ—Ü—å –º–∞—î –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ö—ñ–¥, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
          state.currentPlayerIndex = await getNextPlayerIndex(state, roomId);
          // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–ø—É—Å–∫—É —Ö–æ–¥—É
          delete state.skipNextTurn;
          
          // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –ø—Ä–æ –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É
          io.to(roomId).emit('turnSkipped', { 
            skippedPlayerId: currentPlayerId,
            currentPlayerId: room.players[state.currentPlayerIndex]
          });
        }
        
        // –û–Ω–æ–≤–∏—Ç–∏ —Ö—ñ–¥
        io.to(roomId).emit('turnChanged', {
          currentPlayerId: room.players[state.currentPlayerIndex]
        });
      }
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–∏–¥–∫–∞ –∫—É–±–∏–∫–∞ –§–æ—Ä—Ç—É–Ω–æ:', err);
    }
  });

  // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–∞—Ä—Ç–∏ –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è (–¥–ª—è –≤–∏–ø–∞–¥–∫—É 4 –Ω–∞ –∫—É–±–∏–∫—É –§–æ—Ä—Ç—É–Ω–æ)
  socket.on('discardCard', async ({ roomId, cardIndex }) => {
    const state = gameStates[roomId];
    if (!state) return;
    
    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π
    if (!socket.username) {
      socket.emit('authError', { message: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' });
      return;
    }
    
    if (!state.fortunoPending || socket.username !== state.fortunoPlayerId) return;
    
    try {
      // Get the room to access players list
      const room = await Room.findOne({ roomId });
      if (!room) {
        console.warn(`‚ö†Ô∏è –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ —Å–∫–∏–Ω—É—Ç–∏ –∫–∞—Ä—Ç—É`);
        return;
      }
      
      const hand = state.hands[socket.username];
    
    if (cardIndex < 0 || cardIndex >= hand.length) return;
    
    // –í–∏–¥–∞–ª—è—î–º–æ –æ–±—Ä–∞–Ω—É –∫–∞—Ä—Ç—É —Ç–∞ –¥–æ–¥–∞—î–º–æ —ó—ó —É –ü–û–ß–ê–¢–û–ö –≤—ñ–¥–±–æ—é (–≤–Ω–∏–∑—É —Å—Ç–æ–ø–∫–∏)
    const cardToDiscard = hand.splice(cardIndex, 1)[0];
    state.discardPile.unshift(cardToDiscard);
    
    // –ü–µ—Ä–µ–¥–∞—î–º–æ —Ö—ñ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –≥—Ä–∞–≤—Ü—é
      state.currentPlayerIndex = await getNextPlayerIndex(state, roomId);
    
    // –†–æ–∑–±–ª–æ–∫–æ–≤—É—î–º–æ –≥—Ä—É –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—ñ—ó
    state.fortunoPending = false;
    
    // –û–Ω–æ–≤–∏—Ç–∏ —Ä—É–∫–∏ –≤—Å—ñ–º –≥—Ä–∞–≤—Ü—è–º
    for (const playerId in state.hands) {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–æ–∫–µ—Ç-—ñ–¥ –≥—Ä–∞–≤—Ü—è –∑–∞ –π–æ–≥–æ –Ω—ñ–∫–Ω–µ–π–º–æ–º
        const playerSocketId = findSocketIdByUsername(playerId);
        if (playerSocketId) {
          io.to(playerSocketId).emit('updateHandAndDiscard', {
        hand: state.hands[playerId],
        discardTop: state.discardPile[state.discardPile.length - 1]
      });
        }
    }
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç —É –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
    emitPlayersState(roomId);
    
    // –û–Ω–æ–≤–∏—Ç–∏ —Ö—ñ–¥
    io.to(roomId).emit('turnChanged', {
        currentPlayerId: room.players[state.currentPlayerIndex]
    });
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ –∫–∞—Ä—Ç–∏:', err);
    }
  });
  
    // –î–æ–¥–∞—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è –≤–∑—è—Ç—Ç—è –∫–∞—Ä—Ç–∏–Ω–∏ –∑ –∫–æ–ª–æ–¥–∏
  socket.on('drawCard', async ({ roomId }) => {
    const state = gameStates[roomId];
    if (!state) return;
    
    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π
    if (!socket.username) {
      socket.emit('authError', { message: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' });
      return;
    }
    
    try {
      // Get the room to access players list
      const room = await Room.findOne({ roomId });
      if (!room) {
        console.warn(`‚ö†Ô∏è –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –≤–∑—è—Ç–∏ –∫–∞—Ä—Ç—É`);
        return;
      }
      
      const currentPlayerId = room.players[state.currentPlayerIndex];
      if (socket.username !== currentPlayerId) return; // –ù–µ —Ç–≤—ñ–π —Ö—ñ–¥

    // –í–∑—è—Ç–∏ –∫–∞—Ä—Ç—É –∑ –∫–æ–ª–æ–¥–∏
    if (state.deck.length === 0) return; // –ö–æ–ª–æ–¥–∞ –ø–æ—Ä–æ–∂–Ω—è
    const card = state.deck.shift();
    state.hands[currentPlayerId].push(card);

    // –û–Ω–æ–≤–∏—Ç–∏ —Ä—É–∫—É –≥—Ä–∞–≤—Ü—è
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–æ–∫–µ—Ç-—ñ–¥ –≥—Ä–∞–≤—Ü—è –∑–∞ –π–æ–≥–æ –Ω—ñ–∫–Ω–µ–π–º–æ–º
      const currentPlayerSocketId = findSocketIdByUsername(currentPlayerId);
      if (currentPlayerSocketId) {
        io.to(currentPlayerSocketId).emit('updateHandAndDiscard', {
          hand: state.hands[currentPlayerId],
          discardTop: state.discardPile[state.discardPile.length - 1]
        });
      }

    // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç —É –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
    emitPlayersState(roomId);

    // –ü–µ—Ä–µ–¥–∞—Ç–∏ —Ö—ñ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É
      state.currentPlayerIndex = await getNextPlayerIndex(state, roomId);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –≥—Ä–∞–≤–µ—Ü—å –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ö—ñ–¥
      const nextPlayerId = room.players[state.currentPlayerIndex];
    
    if (state.skipNextTurn === nextPlayerId) {
      // –¶–µ–π –≥—Ä–∞–≤–µ—Ü—å –º–∞—î –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ö—ñ–¥, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ
        state.currentPlayerIndex = await getNextPlayerIndex(state, roomId);
      // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–ø—É—Å–∫—É —Ö–æ–¥—É
      delete state.skipNextTurn;
      
      // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –≤—Å—ñ—Ö –ø—Ä–æ –ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É
      io.to(roomId).emit('turnSkipped', { 
        skippedPlayerId: nextPlayerId,
          currentPlayerId: room.players[state.currentPlayerIndex]
      });
    }
    
    io.to(roomId).emit('turnChanged', {
        currentPlayerId: room.players[state.currentPlayerIndex]
      });
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç—Ç—ñ –∫–∞—Ä—Ç–∏:', err);
    }
  });

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è socket.id –∑–∞ username
  function findSocketIdByUsername(username) {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Å–æ–∫–µ—Ç–∏
    const sockets = io.sockets.sockets;
    for (const [socketId, socketObj] of sockets) {
      if (socketObj.username === username) {
        return socketId;
      }
    }
    return null;
  }

  // –í–∏–¥–∞—á–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ—ó –∫–∞—Ä—Ç–∏–Ω–∏ –≥—Ä–∞–≤—Ü—é (DEV)
  socket.on('devGiveCard', ({ roomId, value, color }) => {
    const state = gameStates[roomId];
    if (!state) return;
    
    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π
    if (!socket.username) {
      socket.emit('authError', { message: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' });
      return;
    }
    
    // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ—à—É–∫—É
    const normalizedValue = String(value).toLowerCase().trim();
    
    // –ö–∞—Ä—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–ª–æ–¥—ñ
    let foundCard = null;
    
    // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥
    const exactMatch = state.deck.findIndex(c => 
      c.color === color && 
      String(c.value).toLowerCase().trim() === normalizedValue
    );
    
    if (exactMatch !== -1) {
      // –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ —Ç–æ—á–Ω–∏–π –∑–±—ñ–≥, –±–µ—Ä–µ–º–æ —Ü—é –∫–∞—Ä—Ç—É
      foundCard = state.deck.splice(exactMatch, 1)[0];
    } else {
      // –Ø–∫—â–æ —Ç–æ—á–Ω–æ–≥–æ –∑–±—ñ–≥—É –Ω–µ–º–∞—î, —à—É–∫–∞—î–º–æ —á–∞—Å—Ç–∫–æ–≤–∏–π –∑–±—ñ–≥
      const cardMappings = {
        '—Ñ–æ—Ä—Ç': ['—Ñ–æ—Ä—Ç—É–Ω–æ', '—Ñ–æ—Ä—Ç—É–Ω–∞', 'wild'],
        '+3': ['+3 –∫–∞—Ä—Ç–∏–Ω–∏', '+3–∫–∞—Ä—Ç–∏–Ω–∏', '–ø–ª—é—Å3', '–ø–ª—é—Å 3', 'plus3', 'plus 3'],
        '+5': ['+5 –∫–∞—Ä—Ç', '+5–∫–∞—Ä—Ç', '–ø–ª—é—Å5', '–ø–ª—é—Å 5', 'plus5', 'plus 5'],
        '–ø—Ä–æ–ø—É—Å–∫': ['–ø—Ä–æ–ø—É—Å–∫ —Ö–æ–¥—É', '–ø—Ä–æ–ø—É—Å–∫', 'skip'],
        '–æ–±–µ—Ä—Ç': ['–æ–±–µ—Ä—Ç–∞–Ω–Ω—è —Ö–æ–¥—É', '–æ–±–µ—Ä—Ç–∞–Ω–Ω—è', 'reverse']
      };
      
      // –®—É–∫–∞—î–º–æ –≤ –ø–µ—Ä—à—É —á–µ—Ä–≥—É –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
      for (const [key, variations] of Object.entries(cardMappings)) {
        if (normalizedValue.includes(key) || variations.some(v => normalizedValue.includes(v))) {
          const matchIdx = state.deck.findIndex(c => 
            c.color === color && 
            variations.some(v => String(c.value).toLowerCase().includes(v)) ||
            String(c.value).toLowerCase().includes(key)
          );
          
          if (matchIdx !== -1) {
            foundCard = state.deck.splice(matchIdx, 1)[0];
            break;
          }
        }
      }
      
      // –Ø–∫—â–æ —ñ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, —à—É–∫–∞—î–º–æ –±—É–¥—å-—è–∫—É –∫–∞—Ä—Ç—É –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –∫–æ–ª—å–æ—Ä—É
      if (!foundCard) {
        const colorMatchIdx = state.deck.findIndex(c => c.color === color);
        if (colorMatchIdx !== -1) {
          foundCard = state.deck.splice(colorMatchIdx, 1)[0];
        }
      }
    }
    
    // –Ø–∫—â–æ –∫–∞—Ä—Ç—É –∑–Ω–∞–π–¥–µ–Ω–æ, –¥–æ–¥–∞—î–º–æ —ó—ó –¥–æ —Ä—É–∫–∏ –≥—Ä–∞–≤—Ü—è
    if (foundCard) {
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–º—ñ—Å—Ç—å socket.id
      if (!state.hands[socket.username]) state.hands[socket.username] = [];
      state.hands[socket.username].push(foundCard);
      
      console.log(`–í–∏–¥–∞–Ω–æ –∫–∞—Ä—Ç—É ${foundCard.color} ${foundCard.value} –≥—Ä–∞–≤—Ü—é ${socket.username}`);
      
      // –û–Ω–æ–≤–∏—Ç–∏ —Ä—É–∫—É –≥—Ä–∞–≤—Ü—è
      io.to(socket.id).emit('updateHandAndDiscard', {
        hand: state.hands[socket.username],
        discardTop: state.discardPile[state.discardPile.length - 1]
      });
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç —É –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
      emitPlayersState(roomId);
    } else {
      console.warn(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç—É ${color} ${value} –≤ –∫–æ–ª–æ–¥—ñ`);
    }
  });

  // –†–æ–∑—Ä–æ–±–Ω–∏—Ü—å–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –≤–∑—è—Ç–∏ –∫—ñ–ª—å–∫–∞ –∫–∞—Ä—Ç –∑ –∫–æ–ª–æ–¥–∏
  socket.on('devDrawCards', ({ roomId, count }) => {
    const state = gameStates[roomId];
    if (!state) return;
    
    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π
    if (!socket.username) {
      socket.emit('authError', { message: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è' });
      return;
    }
    
    // –î–æ–¥–∞—î–º–æ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç –∑ –∫–æ–ª–æ–¥–∏
    for (let i = 0; i < count && state.deck.length > 0; i++) {
      const card = state.deck.shift();
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω—ñ–∫–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–º—ñ—Å—Ç—å socket.id
      if (!state.hands[socket.username]) state.hands[socket.username] = [];
      state.hands[socket.username].push(card);
    }
    
    // –û–Ω–æ–≤–∏—Ç–∏ —Ä—É–∫—É –≥—Ä–∞–≤—Ü—è
    io.to(socket.id).emit('updateHandAndDiscard', {
      hand: state.hands[socket.username],
      discardTop: state.discardPile[state.discardPile.length - 1]
    });
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞—Ä—Ç —É –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
    emitPlayersState(roomId);
  });
  
  // –†–æ–∑—Ä–æ–±–Ω–∏—Ü—å–∫–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –∑—Ä–æ–±–∏—Ç–∏ —Ö—ñ–¥ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
  socket.on('devSetMyTurn', async ({ roomId }) => {
    const state = gameStates[roomId];
    if (!state) return;
    
    try {
      // Get the room to access players list from database
      const room = await Room.findOne({ roomId });
      if (!room) {
        console.warn(`‚ö†Ô∏è –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è devSetMyTurn`);
        return;
      }
      
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è –≤ –∫—ñ–º–Ω–∞—Ç—ñ –∑ –ë–î
      const currentIndex = room.players.indexOf(socket.username);
      
      if (currentIndex === -1) return; // –ì—Ä–∞–≤–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π
      
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ö—ñ–¥ –Ω–∞ —Ü—å–æ–≥–æ –≥—Ä–∞–≤—Ü—è
      state.currentPlayerIndex = currentIndex;
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ö—ñ–¥ –¥–ª—è –≤—Å—ñ—Ö –≥—Ä–∞–≤—Ü—ñ–≤
      io.to(roomId).emit('turnChanged', {
        currentPlayerId: socket.username
      });
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ devSetMyTurn:', err);
    }
  });

  // Handler for requesting updated player data
  socket.on('requestPlayerUpdate', async ({ roomId }) => {
    try {
      const room = await Room.findOne({ roomId });
      if (!room) {
        console.warn(`‚ö†Ô∏è Room ${roomId} not found for player update request`);
        return;
      }

      const state = gameStates[roomId];
      if (!state) {
        console.warn(`‚ö†Ô∏è Game state for ${roomId} not found for player update request`);
        return;
      }

      // Create player list with hand sizes
      const updatedPlayers = room.players.map(username => ({
        id: username,
        name: username,
        handSize: state.hands[username]?.length || 0
      }));

      // Send updated player list
      socket.emit('updatePlayers', { players: updatedPlayers });
      console.log(`üìã Sent updated player list to ${socket.username}`);
    } catch (err) {
      console.error('Error in requestPlayerUpdate:', err);
    }
  });

  // –í–∏—Ö—ñ–¥ –∑ –∫—ñ–º–Ω–∞—Ç–∏ (—è–≤–Ω–∏–π)
  socket.on('leaveRoom', async (data) => {
    // Handle both formats for backward compatibility
    const roomId = typeof data === 'string' ? data : data.roomId;
    const isExplicitExit = data.isExplicitExit === true;
    try {
      console.log(`üö™ –°–ø—Ä–æ–±–∞ –≤–∏—Ö–æ–¥—É –∑ –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}, –≥—Ä–∞–≤–µ—Ü—å: ${socket.username || '–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π'}`);
      
      // Don't proceed if socket doesn't have username (not authenticated)
      if (!socket.username) {
        console.log(`‚ö†Ô∏è –ù–µ–∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤–∏–π—Ç–∏ –∑ –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}`);
        return;
      }
      
      // Check if this socket is actually in this room
      const isInRoom = socket.rooms.has(roomId);
      if (!isInRoom) {
        console.log(`‚ö†Ô∏è –°–æ–∫–µ—Ç ${socket.id} –Ω–µ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∫—ñ–º–Ω–∞—Ç—ñ ${roomId}, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ leaveRoom`);
        return;
      }
      
      const room = await Room.findOne({ roomId });
      if (!room) {
        console.log(`‚ùå –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ —ñ—Å–Ω—É—î`);
        return;
      }
      
      // Remove any duplicate entries of this player before processing their leave
      const uniquePlayers = [...new Set(room.players)];
      if (uniquePlayers.length !== room.players.length) {
        console.log(`‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤ –ø–µ—Ä–µ–¥ –≤–∏—Ö–æ–¥–æ–º. –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫...`);
        console.log(`–ë—É–ª–æ: ${JSON.stringify(room.players)}`);
        room.players = uniquePlayers;
        console.log(`–°—Ç–∞–ª–æ: ${JSON.stringify(room.players)}`);
      }
      
      if (room.players.includes(socket.username)) {
        // Log if this is an explicit exit
        console.log(`${isExplicitExit ? 'üö™ –ü–æ–≤–Ω–∏–π –≤–∏—Ö—ñ–¥' : 'üîÑ –¢–∏–º—á–∞—Å–æ–≤–∏–π –≤–∏—Ö—ñ–¥'} –¥–ª—è –≥—Ä–∞–≤—Ü—è ${socket.username}`);
        
        if (room.gameStarted) {
          if (isExplicitExit) {
            // EXPLICIT EXIT: Completely remove player from room (can't rejoin)
            console.log(`üö™ –ì—Ä–∞–≤–µ—Ü—å ${socket.username} –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏—Ö–æ–¥–∏—Ç—å –∑ –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}`);
            
            // Remove player from the room database
            room.players = room.players.filter(id => id !== socket.username);
            await room.save();
            
            // IMPORTANT: Also update the game state to remove the player
            if (gameStates[roomId]) {
              // Remove the player from hands
              if (gameStates[roomId].hands) {
                delete gameStates[roomId].hands[socket.username];
              }
              
              // Adjust the current player index if needed
              if (gameStates[roomId].currentPlayerIndex >= room.players.length) {
                gameStates[roomId].currentPlayerIndex = 0;
              }
            }
            
            // Leave the socket
            socket.leave(roomId);
            socket.roomId = null;
            
            // Notify others that this player has left permanently
            io.to(roomId).emit('playerLeft', { 
              username: socket.username,
              message: `–ì—Ä–∞–≤–µ—Ü—å ${socket.username} –≤–∏–π—à–æ–≤ –∑ –≥—Ä–∏`
            });
            
            // Update player list for remaining players with hand sizes
            const updatedPlayers = room.players.map(username => ({
              id: username,
              name: username,
              handSize: gameStates[roomId]?.hands[username]?.length || 0
            }));
            
            io.to(roomId).emit('updatePlayers', { 
              players: updatedPlayers
            });
            
            // Check if only one player remains, end game and delete room
            if (room.players.length === 1) {
              console.log(`üèÅ –ó–∞–ª–∏—à–∏–≤—Å—è —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω –≥—Ä–∞–≤–µ—Ü—å —É –∫—ñ–º–Ω–∞—Ç—ñ ${roomId}, –∑–∞–≤–µ—Ä—à—É—î–º–æ –≥—Ä—É`);
              
              // Notify the last player that they won by default
              io.to(roomId).emit('gameWon', {
                winner: room.players[0],
                message: '–í–∏ –ø–µ—Ä–µ–º–æ–≥–ª–∏! –í—Å—ñ —ñ–Ω—à—ñ –≥—Ä–∞–≤—Ü—ñ –≤–∏–π—à–ª–∏.'
              });
              
              // Clear any pending FORTUNO states
              if (gameStates[roomId]?.fortunoState?.fortunoButtonTimeout) {
                clearTimeout(gameStates[roomId].fortunoState.fortunoButtonTimeout);
              }
              
              // Update room state in database
              room.gameStarted = false;
              await room.save();
              
              // Delete the room and game state
              await Room.deleteOne({ roomId });
              delete gameStates[roomId];
              console.log(`üóëÔ∏è –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –≤–∏–¥–∞–ª–µ–Ω–∞ (–∑–∞–ª–∏—à–∏–≤—Å—è –æ–¥–∏–Ω –≥—Ä–∞–≤–µ—Ü—å)`);
            } else {
              // If game continues, make sure the current player is valid
              if (gameStates[roomId]) {
                // If current player was the one who left, update turn
                const currentState = gameStates[roomId];
                const currentPlayerIdx = currentState.currentPlayerIndex;
                
                if (currentPlayerIdx >= room.players.length || 
                    room.players[currentPlayerIdx] === socket.username) {
                  // Current player left or index is invalid, update turn
                  currentState.currentPlayerIndex = currentState.currentPlayerIndex % room.players.length;
                  
                  // Notify about turn change
                  io.to(roomId).emit('turnChanged', {
                    currentPlayerId: room.players[currentState.currentPlayerIndex]
                  });
                }
              }
            }
          } else {
            // TEMPORARY LEAVE (refresh/navigation): Allow rejoining
            console.log(`üéÆ –ê–∫—Ç–∏–≤–Ω–∞ –≥—Ä–∞: –≥—Ä–∞–≤–µ—Ü—å ${socket.username} —Ç–∏–º—á–∞—Å–æ–≤–æ –≤–∏–π—à–æ–≤ –∑ –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}`);
            
            // Add player to the disconnected players list
            if (!disconnectedPlayers.has(roomId)) {
              disconnectedPlayers.set(roomId, new Set());
            }
            disconnectedPlayers.get(roomId).add(socket.username);
            
            console.log(`üë• –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}: ${Array.from(disconnectedPlayers.get(roomId))}`);
            
            // Just leave the socket but keep player in the database
            socket.leave(roomId);
            socket.roomId = null;
            
            // Notify others that this player has temporarily left
            io.to(roomId).emit('playerTemporarilyLeft', { 
              username: socket.username,
              message: `–ì—Ä–∞–≤–µ—Ü—å ${socket.username} —Ç–∏–º—á–∞—Å–æ–≤–æ –≤–∏–π—à–æ–≤ –∑ –≥—Ä–∏`
            });
            
            // Check if all players have disconnected
            if (disconnectedPlayers.has(roomId) && 
                disconnectedPlayers.get(roomId).size === room.players.length) {
              console.log(`üèÅ –í—Å—ñ –≥—Ä–∞–≤—Ü—ñ (${room.players.length}) –≤—ñ–¥–∫–ª—é—á–∏–ª–∏—Å—è –∑ –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}, –≤–∏–¥–∞–ª—è—î–º–æ –∫—ñ–º–Ω–∞—Ç—É`);
              await Room.deleteOne({ roomId });
              disconnectedPlayers.delete(roomId);
              delete gameStates[roomId];
              console.log(`üóëÔ∏è –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –≤–∏–¥–∞–ª–µ–Ω–∞ (–≤—Å—ñ –≥—Ä–∞–≤—Ü—ñ –≤–∏–π—à–ª–∏)`);
            } else {
              console.log(`üëã –ì—Ä–∞–≤–µ—Ü—å ${socket.username} —Ç–∏–º—á–∞—Å–æ–≤–æ –ø–æ–∫–∏–Ω—É–≤ –∫—ñ–º–Ω–∞—Ç—É ${roomId} (–∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤ –±–∞–∑—ñ)`);
            }
          }
          
          return;
        }
        
        // For waiting rooms (not started games), proceed with standard leave logic
        // Remove player from room
        room.players = room.players.filter(id => id !== socket.username);
        
        // Always delete a waiting room if it becomes empty
        if (room.players.length === 0) {
          await Room.deleteOne({ roomId });
          console.log(`üóëÔ∏è –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –≤–∏–¥–∞–ª–µ–Ω–∞ (waiting room, –≤—Å—ñ –≥—Ä–∞–≤—Ü—ñ –≤–∏–π—à–ª–∏)`);
        } else {
          try {
            await room.save();
            // Ensure no duplicates in the player list when emitting
            io.to(roomId).emit('playerJoined', { players: [...new Set(room.players)] });
          } catch (err) {
            if (err.name === 'VersionError') {
              console.log('–ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä—Å—ñ—ó –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –≥—Ä–∞–≤—Ü—è, –ø–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞...');
              // Refetch the room and try again
              const refreshedRoom = await Room.findOne({ roomId });
              if (refreshedRoom) {
                // Remove the player from the refreshed list
                refreshedRoom.players = refreshedRoom.players.filter(id => id !== socket.username);
                
                // Always delete a waiting room if it becomes empty
                if (refreshedRoom.players.length === 0) {
                  await Room.deleteOne({ roomId });
                  console.log(`üóëÔ∏è –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –≤–∏–¥–∞–ª–µ–Ω–∞ –ø—ñ—Å–ª—è VersionError (waiting room, –≤—Å—ñ –≥—Ä–∞–≤—Ü—ñ –≤–∏–π—à–ª–∏)`);
                } else {
                  await refreshedRoom.save();
                  console.log(`–û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø—ñ—Å–ª—è –≤–∏—Ö–æ–¥—É: ${JSON.stringify(refreshedRoom.players)}`);
                  // Ensure no duplicates in the player list when emitting
                  io.to(roomId).emit('playerJoined', { players: [...new Set(refreshedRoom.players)] });
                }
              }
            } else {
              console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥—Ä–∞–≤—Ü—ñ–≤ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ:', err);
            }
          }
        }
        
        socket.leave(roomId);
        // Clear the roomId from socket
        socket.roomId = null;
        console.log(`üëã –ì—Ä–∞–≤–µ—Ü—å ${socket.username} –≤–∏–π—à–æ–≤ –∑ –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}`);
      } else {
        console.log(`‚ö†Ô∏è –ì—Ä–∞–≤–µ—Ü—å ${socket.username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –≤ –∫—ñ–º–Ω–∞—Ç—ñ ${roomId}`);
      }
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ leaveRoom:', err);
    }
  });

  // –í–∏—Ö—ñ–¥ –∑ –∫—ñ–º–Ω–∞—Ç–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –≤–∫–ª–∞–¥–∫–∏)
  socket.on('disconnect', async () => {
    try {
      // Don't proceed if socket doesn't have username (not authenticated)
      if (!socket.username) {
        console.log(`–ù–µ–∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è: ${socket.id}`);
        return;
      }
      
      if (socket.roomId) {
        // Add a small delay to allow for page navigation and reconnection
        setTimeout(async () => {
          try {
            // Check if user has reconnected in another socket
            const isUserStillConnected = Array.from(io.sockets.sockets.values())
              .some(s => s.id !== socket.id && s.username === socket.username);
              
            if (isUserStillConnected) {
              console.log(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${socket.username} –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è, –∫—ñ–º–Ω–∞—Ç–∞ ${socket.roomId} –Ω–µ –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è`);
              return;
            }
            
            const room = await Room.findOne({ roomId: socket.roomId });
            if (room && room.players.includes(socket.username)) {
              // For running games, keep the player in the list so they can reconnect later
              if (room.gameStarted) {
                console.log(`–ì—Ä–∞–≤–µ—Ü—å ${socket.username} —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è –≤—ñ–¥ –∞–∫—Ç–∏–≤–Ω–æ—ó –≥—Ä–∏ –≤ –∫—ñ–º–Ω–∞—Ç—ñ ${socket.roomId}`);
                
                // Add player to disconnected players list
                if (!disconnectedPlayers.has(socket.roomId)) {
                  disconnectedPlayers.set(socket.roomId, new Set());
                }
                disconnectedPlayers.get(socket.roomId).add(socket.username);
                
                console.log(`üë• –í—ñ–¥—Å—Ç–µ–∂—É—î–º–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –∫—ñ–º–Ω–∞—Ç–∏ ${socket.roomId}: ${Array.from(disconnectedPlayers.get(socket.roomId))}`);
                
                // Notify other players that this player is temporarily disconnected
                io.to(socket.roomId).emit('playerTemporarilyDisconnected', { 
                  username: socket.username,
                  message: `–ì—Ä–∞–≤–µ—Ü—å ${socket.username} —Ç–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è`
                });
                
                // Check if all players have now disconnected
                if (disconnectedPlayers.has(socket.roomId) && 
                    disconnectedPlayers.get(socket.roomId).size === room.players.length) {
                  console.log(`üèÅ –í—Å—ñ –≥—Ä–∞–≤—Ü—ñ (${room.players.length}) –≤—ñ–¥–∫–ª—é—á–∏–ª–∏—Å—è –∑ –∫—ñ–º–Ω–∞—Ç–∏ ${socket.roomId}, –≤–∏–¥–∞–ª—è—î–º–æ –∫—ñ–º–Ω–∞—Ç—É`);
                  await Room.deleteOne({ roomId: socket.roomId });
                  disconnectedPlayers.delete(socket.roomId);
                  delete gameStates[socket.roomId];
                  console.log(`üóëÔ∏è –ö—ñ–º–Ω–∞—Ç–∞ ${socket.roomId} –≤–∏–¥–∞–ª–µ–Ω–∞ (–≤—Å—ñ –≥—Ä–∞–≤—Ü—ñ –≤–∏–π—à–ª–∏)`);
                } else {
                  // Don't remove the player from the room yet to allow reconnection
                  console.log(`üë• –ì—Ä–∞–≤–µ—Ü—å –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤ –±–∞–∑—ñ –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø–µ—Ä–µ–ø'—î–¥–Ω–∞–Ω–Ω—è`);
                }
              } else {
                // For waiting rooms, remove the player if they disconnect
                room.players = room.players.filter(id => id !== socket.username);
                
                // Always delete empty waiting rooms
                if (room.players.length === 0) {
                  await Room.deleteOne({ roomId: socket.roomId });
                  console.log(`üóëÔ∏è –ö—ñ–º–Ω–∞—Ç–∞ ${socket.roomId} –≤–∏–¥–∞–ª–µ–Ω–∞ (disconnect, waiting room, –≤—Å—ñ –≥—Ä–∞–≤—Ü—ñ –≤–∏–π—à–ª–∏)`);
                } else {
                  await room.save();
                  io.to(socket.roomId).emit('playerJoined', { players: [...new Set(room.players)] });
                  console.log(`–ì—Ä–∞–≤–µ—Ü—å ${socket.username} –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è –≤—ñ–¥ –∫—ñ–º–Ω–∞—Ç–∏ ${socket.roomId}, –∑–∞–ª–∏—à–∏–ª–æ—Å—å ${room.players.length} –≥—Ä–∞–≤—Ü—ñ–≤`);
                }
              }
            }
          } catch (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ–≥–æ disconnect:', err);
          }
        }, 5000); // 5 seconds delay to allow reconnection during page navigation
      } else {
        console.log(`–ì—Ä–∞–≤–µ—Ü—å ${socket.username} –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è (–Ω–µ –±—É–≤ —É –∫—ñ–º–Ω–∞—Ç—ñ)`);
      }
    } catch (err) {
      console.error('–ü–æ–º–∏–ª–∫–∞ disconnect:', err);
    }
  });

  // Handle chat messages
  socket.on('sendMessage', ({ roomId, message }) => {
    if (!socket.username || !roomId) return;
    
    // Create message object
    const messageObj = {
      username: socket.username,
      text: message,
      timestamp: Date.now()
    };
    
    // Store message in room's message history
    if (!roomMessages.has(roomId)) {
      roomMessages.set(roomId, []);
    }
    roomMessages.get(roomId).push(messageObj);
    
    // Broadcast message to all users in the room
    io.to(roomId).emit('chatMessage', messageObj);
  });

  // Handle typing status
  socket.on('typing', ({ roomId, isTyping }) => {
    if (!socket.username || !roomId) return;
    
    // Update typing status for the room
    if (!typingUsers.has(roomId)) {
      typingUsers.set(roomId, new Map());
    }
    const roomTyping = typingUsers.get(roomId);
    roomTyping.set(socket.username, isTyping);
    
    // Broadcast typing status to all users in the room
    io.to(roomId).emit('userTyping', {
      username: socket.username,
      isTyping
    });
  });

  // Modify the existing joinRoom handler to include chat initialization
  socket.on('joinRoom', (roomId) => {
    // ... existing joinRoom code ...

    // Send chat history to the joining user (but no join message)
    if (roomMessages.has(roomId)) {
      const messages = roomMessages.get(roomId);
      socket.emit('chatHistory', messages);
    }
  });

  // Modify the existing leaveRoom handler to include chat cleanup
  socket.on('leaveRoom', ({ roomId, isExplicitExit }) => {
    // ... existing leaveRoom code ...

    // Clean up typing status
    if (typingUsers.has(roomId)) {
      const roomTyping = typingUsers.get(roomId);
      roomTyping.delete(socket.username);
      if (roomTyping.size === 0) {
        typingUsers.delete(roomId);
      }
    }

    // If this was the last player, clean up chat history
    Room.findOne({ roomId }).then(room => {
      if (!room || room.players.length === 0) {
        roomMessages.delete(roomId);
        typingUsers.delete(roomId);
      }
    }).catch(err => {
      console.error('Error checking room for chat cleanup:', err);
    });
  });
});

// –í–∏–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ React (–ø—ñ—Å–ª—è –±—ñ–ª–¥—É)
app.use(express.static(path.join(__dirname, '../client/dist')));

// SPA fallback
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../client/dist/index.html'));
});

const PORT = process.env.PORT || 5000;
server.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// Add a cleanup function that runs periodically to check for and remove empty rooms
setInterval(async () => {
  try {
    // Check each room with disconnected players
    for (const [roomId, disconnectedSet] of disconnectedPlayers.entries()) {
      const room = await Room.findOne({ roomId });
      
      if (!room) {
        // Room no longer exists, clean up our tracking
        disconnectedPlayers.delete(roomId);
        continue;
      }
      
      // If all players in the room are disconnected, delete it
      if (disconnectedSet.size === room.players.length) {
        console.log(`üßπ –û—á–∏—â–µ–Ω–Ω—è: –í—Å—ñ –≥—Ä–∞–≤—Ü—ñ (${room.players.length}) –≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ –∑ –∫—ñ–º–Ω–∞—Ç–∏ ${roomId}, –≤–∏–¥–∞–ª—è—î–º–æ –∫—ñ–º–Ω–∞—Ç—É`);
        await Room.deleteOne({ roomId });
        disconnectedPlayers.delete(roomId);
        delete gameStates[roomId];
        console.log(`üóëÔ∏è –ö—ñ–º–Ω–∞—Ç–∞ ${roomId} –≤–∏–¥–∞–ª–µ–Ω–∞ (–ø–ª–∞–Ω–æ–≤–∏–π –ø—ñ–¥—á–∏—Å—Ç–∫–∞)`);
      }
    }
    
    // Also check for any waiting rooms with zero players (these should never exist, but just in case)
    const emptyWaitingRooms = await Room.find({ 
      gameStarted: false, 
      players: { $size: 0 } 
    });
    
    if (emptyWaitingRooms.length > 0) {
      console.log(`üßπ –ó–Ω–∞–π–¥–µ–Ω–æ ${emptyWaitingRooms.length} –ø–æ—Ä–æ–∂–Ω—ñ—Ö –∫—ñ–º–Ω–∞—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è, –≤–∏–¥–∞–ª—è—î–º–æ...`);
      
      for (const room of emptyWaitingRooms) {
        await Room.deleteOne({ roomId: room.roomId });
        console.log(`üóëÔ∏è –ü–æ—Ä–æ–∂–Ω—è –∫—ñ–º–Ω–∞—Ç–∞ ${room.roomId} –≤–∏–¥–∞–ª–µ–Ω–∞`);
      }
    }
    
    // Check for stale waiting rooms (old rooms that are likely abandoned)
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000); // 1 hour ago
    const staleWaitingRooms = await Room.find({
      gameStarted: false,
      createdAt: { $lt: oneHourAgo }
    });
    
    if (staleWaitingRooms.length > 0) {
      console.log(`üßπ –ó–Ω–∞–π–¥–µ–Ω–æ ${staleWaitingRooms.length} –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∫—ñ–º–Ω–∞—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è, –≤–∏–¥–∞–ª—è—î–º–æ...`);
      
      for (const room of staleWaitingRooms) {
        await Room.deleteOne({ roomId: room.roomId });
        console.log(`üóëÔ∏è –ó–∞—Å—Ç–∞—Ä—ñ–ª–∞ –∫—ñ–º–Ω–∞—Ç–∞ ${room.roomId} –≤–∏–¥–∞–ª–µ–Ω–∞ (—Å—Ç–≤–æ—Ä–µ–Ω–∞ ${room.createdAt})`);
      }
    }
  } catch (err) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–ª–∞–Ω–æ–≤–æ—ó –æ—á–∏—Å—Ç–∫–∏ –∫—ñ–º–Ω–∞—Ç:', err);
  }
}, 60000); // Check every minute